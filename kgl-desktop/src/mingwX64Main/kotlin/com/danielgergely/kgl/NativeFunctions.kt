package com.danielgergely.kgl

actual fun glActiveShaderProgram(pipeline: UInt, program: UInt): Unit = com.kgl.opengl.glActiveShaderProgram(pipeline, program)
actual fun glActiveTexture(texture: UInt): Unit = com.kgl.opengl.glActiveTexture(texture)
actual fun glAttachShader(program: UInt, shader: UInt): Unit = com.kgl.opengl.glAttachShader(program, shader)
actual fun glBeginConditionalRender(id: UInt, mode: UInt): Unit = com.kgl.opengl.glBeginConditionalRender(id, mode)
actual fun glBeginQuery(target: UInt, id: UInt): Unit = com.kgl.opengl.glBeginQuery(target, id)
actual fun glBeginQueryIndexed(target: UInt, index: UInt, id: UInt): Unit = com.kgl.opengl.glBeginQueryIndexed(target, index, id)
actual fun glBeginTransformFeedback(primitiveMode: UInt): Unit = com.kgl.opengl.glBeginTransformFeedback(primitiveMode)
actual fun glBindAttribLocation(program: UInt, index: UInt, name: String): Unit = com.kgl.opengl.glBindAttribLocation(program, index, name)
actual fun glBindAttribLocation(program: UInt, index: UInt, name: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glBindAttribLocation(program, index, name)
actual fun glBindBuffer(target: UInt, buffer: UInt): Unit = com.kgl.opengl.glBindBuffer(target, buffer)
actual fun glBindBufferBase(target: UInt, index: UInt, buffer: UInt): Unit = com.kgl.opengl.glBindBufferBase(target, index, buffer)
actual fun glBindBufferRange(target: UInt, index: UInt, buffer: UInt, offset: Long, size: Long): Unit = com.kgl.opengl.glBindBufferRange(target, index, buffer, offset, size)
actual fun glBindBuffersBase(target: UInt, first: UInt, count: Int, buffers: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glBindBuffersBase(target, first, count, buffers)
actual fun glBindBuffersRange(target: UInt, first: UInt, count: Int, buffers: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?, offsets: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.LongVarOf<Long>>?, sizes: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.LongVarOf<Long>>?): Unit = com.kgl.opengl.glBindBuffersRange(target, first, count, buffers, offsets, sizes)
actual fun glBindFragDataLocation(program: UInt, color: UInt, name: String): Unit = com.kgl.opengl.glBindFragDataLocation(program, color, name)
actual fun glBindFragDataLocation(program: UInt, color: UInt, name: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glBindFragDataLocation(program, color, name)
actual fun glBindFragDataLocationIndexed(program: UInt, colorNumber: UInt, index: UInt, name: String): Unit = com.kgl.opengl.glBindFragDataLocationIndexed(program, colorNumber, index, name)
actual fun glBindFragDataLocationIndexed(program: UInt, colorNumber: UInt, index: UInt, name: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glBindFragDataLocationIndexed(program, colorNumber, index, name)
actual fun glBindFramebuffer(target: UInt, framebuffer: UInt): Unit = com.kgl.opengl.glBindFramebuffer(target, framebuffer)
actual fun glBindImageTexture(unit: UInt, texture: UInt, level: Int, layered: UByte, layer: Int, access: UInt, format: UInt): Unit = com.kgl.opengl.glBindImageTexture(unit, texture, level, layered, layer, access, format)
actual fun glBindImageTexture(unit: UInt, texture: UInt, level: Int, layered: Boolean, layer: Int, access: UInt, format: UInt): Unit = com.kgl.opengl.glBindImageTexture(unit, texture, level, layered, layer, access, format)
actual fun glBindImageTextures(first: UInt, count: Int, textures: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glBindImageTextures(first, count, textures)
actual fun glBindProgramPipeline(pipeline: UInt): Unit = com.kgl.opengl.glBindProgramPipeline(pipeline)
actual fun glBindRenderbuffer(target: UInt, renderbuffer: UInt): Unit = com.kgl.opengl.glBindRenderbuffer(target, renderbuffer)
actual fun glBindSampler(unit: UInt, sampler: UInt): Unit = com.kgl.opengl.glBindSampler(unit, sampler)
actual fun glBindSamplers(first: UInt, count: Int, samplers: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glBindSamplers(first, count, samplers)
actual fun glBindTexture(target: UInt, texture: UInt): Unit = com.kgl.opengl.glBindTexture(target, texture)
actual fun glBindTextureUnit(unit: UInt, texture: UInt): Unit = com.kgl.opengl.glBindTextureUnit(unit, texture)
actual fun glBindTextures(first: UInt, count: Int, textures: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glBindTextures(first, count, textures)
actual fun glBindTransformFeedback(target: UInt, id: UInt): Unit = com.kgl.opengl.glBindTransformFeedback(target, id)
actual fun glBindVertexArray(array: UInt): Unit = com.kgl.opengl.glBindVertexArray(array)
actual fun glBindVertexBuffer(bindingindex: UInt, buffer: UInt, offset: Long, stride: Int): Unit = com.kgl.opengl.glBindVertexBuffer(bindingindex, buffer, offset, stride)
actual fun glBindVertexBuffers(first: UInt, count: Int, buffers: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?, offsets: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.LongVarOf<Long>>?, strides: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glBindVertexBuffers(first, count, buffers, offsets, strides)
actual fun glBlendColor(red: Float, green: Float, blue: Float, alpha: Float): Unit = com.kgl.opengl.glBlendColor(red, green, blue, alpha)
actual fun glBlendEquation(mode: UInt): Unit = com.kgl.opengl.glBlendEquation(mode)
actual fun glBlendEquationSeparate(modeRGB: UInt, modeAlpha: UInt): Unit = com.kgl.opengl.glBlendEquationSeparate(modeRGB, modeAlpha)
actual fun glBlendEquationSeparatei(buf: UInt, modeRGB: UInt, modeAlpha: UInt): Unit = com.kgl.opengl.glBlendEquationSeparatei(buf, modeRGB, modeAlpha)
actual fun glBlendEquationi(buf: UInt, mode: UInt): Unit = com.kgl.opengl.glBlendEquationi(buf, mode)
actual fun glBlendFunc(sfactor: UInt, dfactor: UInt): Unit = com.kgl.opengl.glBlendFunc(sfactor, dfactor)
actual fun glBlendFuncSeparate(sfactorRGB: UInt, dfactorRGB: UInt, sfactorAlpha: UInt, dfactorAlpha: UInt): Unit = com.kgl.opengl.glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha)
actual fun glBlendFuncSeparatei(buf: UInt, srcRGB: UInt, dstRGB: UInt, srcAlpha: UInt, dstAlpha: UInt): Unit = com.kgl.opengl.glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha)
actual fun glBlendFunci(buf: UInt, src: UInt, dst: UInt): Unit = com.kgl.opengl.glBlendFunci(buf, src, dst)
actual fun glBlitFramebuffer(srcX0: Int, srcY0: Int, srcX1: Int, srcY1: Int, dstX0: Int, dstY0: Int, dstX1: Int, dstY1: Int, mask: UInt, filter: UInt): Unit = com.kgl.opengl.glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter)
actual fun glBlitNamedFramebuffer(readFramebuffer: UInt, drawFramebuffer: UInt, srcX0: Int, srcY0: Int, srcX1: Int, srcY1: Int, dstX0: Int, dstY0: Int, dstX1: Int, dstY1: Int, mask: UInt, filter: UInt): Unit = com.kgl.opengl.glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter)
actual fun glBufferData(target: UInt, size: Long, data: kotlinx.cinterop.CValuesRef<*>?, usage: UInt): Unit = com.kgl.opengl.glBufferData(target, size, data, usage)
actual fun glBufferStorage(target: UInt, size: Long, data: kotlinx.cinterop.CValuesRef<*>?, flags: UInt): Unit = com.kgl.opengl.glBufferStorage(target, size, data, flags)
actual fun glBufferSubData(target: UInt, offset: Long, size: Long, data: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glBufferSubData(target, offset, size, data)
actual fun glCheckFramebufferStatus(target: UInt): UInt = com.kgl.opengl.glCheckFramebufferStatus(target)
actual fun glCheckNamedFramebufferStatus(framebuffer: UInt, target: UInt): UInt = com.kgl.opengl.glCheckNamedFramebufferStatus(framebuffer, target)
actual fun glClampColor(target: UInt, clamp: UInt): Unit = com.kgl.opengl.glClampColor(target, clamp)
actual fun glClear(mask: UInt): Unit = com.kgl.opengl.glClear(mask)
actual fun glClearBufferData(target: UInt, internalformat: UInt, format: UInt, type: UInt, data: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glClearBufferData(target, internalformat, format, type, data)
actual fun glClearBufferSubData(target: UInt, internalformat: UInt, offset: Long, size: Long, format: UInt, type: UInt, data: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glClearBufferSubData(target, internalformat, offset, size, format, type, data)
actual fun glClearBufferfi(buffer: UInt, drawbuffer: Int, depth: Float, stencil: Int): Unit = com.kgl.opengl.glClearBufferfi(buffer, drawbuffer, depth, stencil)
actual fun glClearBufferfv(buffer: UInt, drawbuffer: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glClearBufferfv(buffer, drawbuffer, value)
actual fun glClearBufferiv(buffer: UInt, drawbuffer: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glClearBufferiv(buffer, drawbuffer, value)
actual fun glClearBufferuiv(buffer: UInt, drawbuffer: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glClearBufferuiv(buffer, drawbuffer, value)
actual fun glClearColor(red: Float, green: Float, blue: Float, alpha: Float): Unit = com.kgl.opengl.glClearColor(red, green, blue, alpha)
actual fun glClearDepth(depth: Double): Unit = com.kgl.opengl.glClearDepth(depth)
actual fun glClearDepthf(d: Float): Unit = com.kgl.opengl.glClearDepthf(d)
actual fun glClearNamedBufferData(buffer: UInt, internalformat: UInt, format: UInt, type: UInt, data: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glClearNamedBufferData(buffer, internalformat, format, type, data)
actual fun glClearNamedBufferSubData(buffer: UInt, internalformat: UInt, offset: Long, size: Long, format: UInt, type: UInt, data: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data)
actual fun glClearNamedFramebufferfi(framebuffer: UInt, buffer: UInt, drawbuffer: Int, depth: Float, stencil: Int): Unit = com.kgl.opengl.glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil)
actual fun glClearNamedFramebufferfv(framebuffer: UInt, buffer: UInt, drawbuffer: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value)
actual fun glClearNamedFramebufferiv(framebuffer: UInt, buffer: UInt, drawbuffer: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value)
actual fun glClearNamedFramebufferuiv(framebuffer: UInt, buffer: UInt, drawbuffer: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value)
actual fun glClearStencil(s: Int): Unit = com.kgl.opengl.glClearStencil(s)
actual fun glClearTexImage(texture: UInt, level: Int, format: UInt, type: UInt, data: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glClearTexImage(texture, level, format, type, data)
actual fun glClearTexSubImage(texture: UInt, level: Int, xoffset: Int, yoffset: Int, zoffset: Int, width: Int, height: Int, depth: Int, format: UInt, type: UInt, data: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data)
actual fun glClientWaitSync(sync: kotlinx.cinterop.CPointer<cnames.structs.__GLsync>?, flags: UInt, timeout: ULong): UInt = com.kgl.opengl.glClientWaitSync(sync, flags, timeout)
actual fun glClipControl(origin: UInt, depth: UInt): Unit = com.kgl.opengl.glClipControl(origin, depth)
actual fun glColorMask(red: UByte, green: UByte, blue: UByte, alpha: UByte): Unit = com.kgl.opengl.glColorMask(red, green, blue, alpha)
actual fun glColorMask(red: Boolean, green: Boolean, blue: Boolean, alpha: Boolean): Unit = com.kgl.opengl.glColorMask(red, green, blue, alpha)
actual fun glColorMaski(index: UInt, r: UByte, g: UByte, b: UByte, a: UByte): Unit = com.kgl.opengl.glColorMaski(index, r, g, b, a)
actual fun glColorMaski(index: UInt, r: Boolean, g: Boolean, b: Boolean, a: Boolean): Unit = com.kgl.opengl.glColorMaski(index, r, g, b, a)
actual fun glCompileShader(shader: UInt): Unit = com.kgl.opengl.glCompileShader(shader)
actual fun glCompressedTexImage1D(target: UInt, level: Int, internalformat: UInt, width: Int, border: Int, imageSize: Int, data: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data)
actual fun glCompressedTexImage2D(target: UInt, level: Int, internalformat: UInt, width: Int, height: Int, border: Int, imageSize: Int, data: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data)
actual fun glCompressedTexImage3D(target: UInt, level: Int, internalformat: UInt, width: Int, height: Int, depth: Int, border: Int, imageSize: Int, data: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data)
actual fun glCompressedTexSubImage1D(target: UInt, level: Int, xoffset: Int, width: Int, format: UInt, imageSize: Int, data: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data)
actual fun glCompressedTexSubImage2D(target: UInt, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: UInt, imageSize: Int, data: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data)
actual fun glCompressedTexSubImage3D(target: UInt, level: Int, xoffset: Int, yoffset: Int, zoffset: Int, width: Int, height: Int, depth: Int, format: UInt, imageSize: Int, data: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data)
actual fun glCompressedTextureSubImage1D(texture: UInt, level: Int, xoffset: Int, width: Int, format: UInt, imageSize: Int, data: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data)
actual fun glCompressedTextureSubImage2D(texture: UInt, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: UInt, imageSize: Int, data: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data)
actual fun glCompressedTextureSubImage3D(texture: UInt, level: Int, xoffset: Int, yoffset: Int, zoffset: Int, width: Int, height: Int, depth: Int, format: UInt, imageSize: Int, data: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data)
actual fun glCopyBufferSubData(readTarget: UInt, writeTarget: UInt, readOffset: Long, writeOffset: Long, size: Long): Unit = com.kgl.opengl.glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size)
actual fun glCopyImageSubData(srcName: UInt, srcTarget: UInt, srcLevel: Int, srcX: Int, srcY: Int, srcZ: Int, dstName: UInt, dstTarget: UInt, dstLevel: Int, dstX: Int, dstY: Int, dstZ: Int, srcWidth: Int, srcHeight: Int, srcDepth: Int): Unit = com.kgl.opengl.glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth)
actual fun glCopyNamedBufferSubData(readBuffer: UInt, writeBuffer: UInt, readOffset: Long, writeOffset: Long, size: Long): Unit = com.kgl.opengl.glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size)
actual fun glCopyTexImage1D(target: UInt, level: Int, internalformat: UInt, x: Int, y: Int, width: Int, border: Int): Unit = com.kgl.opengl.glCopyTexImage1D(target, level, internalformat, x, y, width, border)
actual fun glCopyTexImage2D(target: UInt, level: Int, internalformat: UInt, x: Int, y: Int, width: Int, height: Int, border: Int): Unit = com.kgl.opengl.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border)
actual fun glCopyTexSubImage1D(target: UInt, level: Int, xoffset: Int, x: Int, y: Int, width: Int): Unit = com.kgl.opengl.glCopyTexSubImage1D(target, level, xoffset, x, y, width)
actual fun glCopyTexSubImage2D(target: UInt, level: Int, xoffset: Int, yoffset: Int, x: Int, y: Int, width: Int, height: Int): Unit = com.kgl.opengl.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height)
actual fun glCopyTexSubImage3D(target: UInt, level: Int, xoffset: Int, yoffset: Int, zoffset: Int, x: Int, y: Int, width: Int, height: Int): Unit = com.kgl.opengl.glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height)
actual fun glCopyTextureSubImage1D(texture: UInt, level: Int, xoffset: Int, x: Int, y: Int, width: Int): Unit = com.kgl.opengl.glCopyTextureSubImage1D(texture, level, xoffset, x, y, width)
actual fun glCopyTextureSubImage2D(texture: UInt, level: Int, xoffset: Int, yoffset: Int, x: Int, y: Int, width: Int, height: Int): Unit = com.kgl.opengl.glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height)
actual fun glCopyTextureSubImage3D(texture: UInt, level: Int, xoffset: Int, yoffset: Int, zoffset: Int, x: Int, y: Int, width: Int, height: Int): Unit = com.kgl.opengl.glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height)
actual fun glCreateBuffer(): UInt = com.kgl.opengl.glCreateBuffer()
actual fun glCreateBuffers(n: Int, buffers: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glCreateBuffers(n, buffers)
actual fun glCreateFramebuffer(): UInt = com.kgl.opengl.glCreateFramebuffer()
actual fun glCreateFramebuffers(n: Int, framebuffers: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glCreateFramebuffers(n, framebuffers)
actual fun glCreateProgram(): UInt = com.kgl.opengl.glCreateProgram()
actual fun glCreateProgramPipeline(): UInt = com.kgl.opengl.glCreateProgramPipeline()
actual fun glCreateProgramPipelines(n: Int, pipelines: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glCreateProgramPipelines(n, pipelines)
actual fun glCreateQueries(target: UInt, n: Int, ids: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glCreateQueries(target, n, ids)
actual fun glCreateQuery(target: UInt): UInt = com.kgl.opengl.glCreateQuery(target)
actual fun glCreateRenderbuffer(): UInt = com.kgl.opengl.glCreateRenderbuffer()
actual fun glCreateRenderbuffers(n: Int, renderbuffers: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glCreateRenderbuffers(n, renderbuffers)
actual fun glCreateSampler(): UInt = com.kgl.opengl.glCreateSampler()
actual fun glCreateSamplers(n: Int, samplers: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glCreateSamplers(n, samplers)
actual fun glCreateShader(type: UInt): UInt = com.kgl.opengl.glCreateShader(type)
actual fun glCreateShaderProgramv(type: UInt, count: Int, strings: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVarOf<Byte>> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<Byte>>> */>?): UInt = com.kgl.opengl.glCreateShaderProgramv(type, count, strings )
actual fun glCreateTexture(target: UInt): UInt = com.kgl.opengl.glCreateTexture(target)
actual fun glCreateTextures(target: UInt, n: Int, textures: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glCreateTextures(target, n, textures)
actual fun glCreateTransformFeedback(): UInt = com.kgl.opengl.glCreateTransformFeedback()
actual fun glCreateTransformFeedbacks(n: Int, ids: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glCreateTransformFeedbacks(n, ids)
actual fun glCreateVertexArray(): UInt = com.kgl.opengl.glCreateVertexArray()
actual fun glCreateVertexArrays(n: Int, arrays: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glCreateVertexArrays(n, arrays)
actual fun glCullFace(mode: UInt): Unit = com.kgl.opengl.glCullFace(mode)
actual fun glDebugMessageControl(source: UInt, type: UInt, severity: UInt, count: Int, ids: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?, enabled: UByte): Unit = com.kgl.opengl.glDebugMessageControl(source, type, severity, count, ids, enabled)
actual fun glDebugMessageControl(source: UInt, type: UInt, severity: UInt, count: Int, ids: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?, enabled: Boolean): Unit = com.kgl.opengl.glDebugMessageControl(source, type, severity, count, ids, enabled)
actual fun glDebugMessageInsert(source: UInt, type: UInt, id: UInt, severity: UInt, length: Int, buf: String): Unit = com.kgl.opengl.glDebugMessageInsert(source, type, id, severity, length, buf)
actual fun glDebugMessageInsert(source: UInt, type: UInt, id: UInt, severity: UInt, length: Int, buf: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glDebugMessageInsert(source, type, id, severity, length, buf)
actual fun glDeleteBuffer(buffer: UInt): Unit = com.kgl.opengl.glDeleteBuffer(buffer)
actual fun glDeleteBuffers(n: Int, buffers: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glDeleteBuffers(n, buffers)
actual fun glDeleteFramebuffer(framebuffer: UInt): Unit = com.kgl.opengl.glDeleteFramebuffer(framebuffer)
actual fun glDeleteFramebuffers(n: Int, framebuffers: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glDeleteFramebuffers(n, framebuffers)
actual fun glDeleteProgram(program: UInt): Unit = com.kgl.opengl.glDeleteProgram(program)
actual fun glDeleteProgramPipeline(pipeline: UInt): Unit = com.kgl.opengl.glDeleteProgramPipeline(pipeline)
actual fun glDeleteProgramPipelines(n: Int, pipelines: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glDeleteProgramPipelines(n, pipelines)
actual fun glDeleteQueries(n: Int, ids: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glDeleteQueries(n, ids)
actual fun glDeleteQuery(id: UInt): Unit = com.kgl.opengl.glDeleteQuery(id)
actual fun glDeleteRenderbuffer(renderbuffer: UInt): Unit = com.kgl.opengl.glDeleteRenderbuffer(renderbuffer)
actual fun glDeleteRenderbuffers(n: Int, renderbuffers: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glDeleteRenderbuffers(n, renderbuffers)
actual fun glDeleteSampler(sampler: UInt): Unit = com.kgl.opengl.glDeleteSampler(sampler)
actual fun glDeleteSamplers(count: Int, samplers: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glDeleteSamplers(count, samplers)
actual fun glDeleteShader(shader: UInt): Unit = com.kgl.opengl.glDeleteShader(shader)
actual fun glDeleteSync(sync: kotlinx.cinterop.CPointer<cnames.structs.__GLsync>?): Unit = com.kgl.opengl.glDeleteSync(sync)
actual fun glDeleteTexture(texture: UInt): Unit = com.kgl.opengl.glDeleteTexture(texture)
actual fun glDeleteTextures(n: Int, textures: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glDeleteTextures(n, textures)
actual fun glDeleteTransformFeedback(id: UInt): Unit = com.kgl.opengl.glDeleteTransformFeedback(id)
actual fun glDeleteTransformFeedbacks(n: Int, ids: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glDeleteTransformFeedbacks(n, ids)
actual fun glDeleteVertexArray(array: UInt): Unit = com.kgl.opengl.glDeleteVertexArray(array)
actual fun glDeleteVertexArrays(n: Int, arrays: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glDeleteVertexArrays(n, arrays)
actual fun glDepthFunc(func: UInt): Unit = com.kgl.opengl.glDepthFunc(func)
actual fun glDepthMask(flag: UByte): Unit = com.kgl.opengl.glDepthMask(flag)
actual fun glDepthMask(flag: Boolean): Unit = com.kgl.opengl.glDepthMask(flag)
actual fun glDepthRange(n: Double, f: Double): Unit = com.kgl.opengl.glDepthRange(n, f)
actual fun glDepthRangeArrayv(first: UInt, count: Int, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glDepthRangeArrayv(first, count, v)
actual fun glDepthRangeIndexed(index: UInt, n: Double, f: Double): Unit = com.kgl.opengl.glDepthRangeIndexed(index, n, f)
actual fun glDepthRangef(n: Float, f: Float): Unit = com.kgl.opengl.glDepthRangef(n, f)
actual fun glDetachShader(program: UInt, shader: UInt): Unit = com.kgl.opengl.glDetachShader(program, shader)
actual fun glDisable(cap: UInt): Unit = com.kgl.opengl.glDisable(cap)
actual fun glDisableVertexArrayAttrib(vaobj: UInt, index: UInt): Unit = com.kgl.opengl.glDisableVertexArrayAttrib(vaobj, index)
actual fun glDisableVertexAttribArray(index: UInt): Unit = com.kgl.opengl.glDisableVertexAttribArray(index)
actual fun glDisablei(target: UInt, index: UInt): Unit = com.kgl.opengl.glDisablei(target, index)
actual fun glDispatchCompute(num_groups_x: UInt, num_groups_y: UInt, num_groups_z: UInt): Unit = com.kgl.opengl.glDispatchCompute(num_groups_x, num_groups_y, num_groups_z)
actual fun glDispatchComputeIndirect(indirect: Long): Unit = com.kgl.opengl.glDispatchComputeIndirect(indirect)
actual fun glDrawArrays(mode: UInt, first: Int, count: Int): Unit = com.kgl.opengl.glDrawArrays(mode, first, count)
actual fun glDrawArraysIndirect(mode: UInt, indirect: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glDrawArraysIndirect(mode, indirect)
actual fun glDrawArraysInstanced(mode: UInt, first: Int, count: Int, instancecount: Int): Unit = com.kgl.opengl.glDrawArraysInstanced(mode, first, count, instancecount)
actual fun glDrawArraysInstancedBaseInstance(mode: UInt, first: Int, count: Int, instancecount: Int, baseinstance: UInt): Unit = com.kgl.opengl.glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance)
actual fun glDrawBuffer(buf: UInt): Unit = com.kgl.opengl.glDrawBuffer(buf)
actual fun glDrawBuffers(n: Int, bufs: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glDrawBuffers(n, bufs)
actual fun glDrawElements(mode: UInt, count: Int, type: UInt, indices: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glDrawElements(mode, count, type, indices)
actual fun glDrawElementsBaseVertex(mode: UInt, count: Int, type: UInt, indices: kotlinx.cinterop.CValuesRef<*>?, basevertex: Int): Unit = com.kgl.opengl.glDrawElementsBaseVertex(mode, count, type, indices, basevertex)
actual fun glDrawElementsIndirect(mode: UInt, type: UInt, indirect: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glDrawElementsIndirect(mode, type, indirect)
actual fun glDrawElementsInstanced(mode: UInt, count: Int, type: UInt, indices: kotlinx.cinterop.CValuesRef<*>?, instancecount: Int): Unit = com.kgl.opengl.glDrawElementsInstanced(mode, count, type, indices, instancecount)
actual fun glDrawElementsInstancedBaseInstance(mode: UInt, count: Int, type: UInt, indices: kotlinx.cinterop.CValuesRef<*>?, instancecount: Int, baseinstance: UInt): Unit = com.kgl.opengl.glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance)
actual fun glDrawElementsInstancedBaseVertex(mode: UInt, count: Int, type: UInt, indices: kotlinx.cinterop.CValuesRef<*>?, instancecount: Int, basevertex: Int): Unit = com.kgl.opengl.glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex)
actual fun glDrawElementsInstancedBaseVertexBaseInstance(mode: UInt, count: Int, type: UInt, indices: kotlinx.cinterop.CValuesRef<*>?, instancecount: Int, basevertex: Int, baseinstance: UInt): Unit = com.kgl.opengl.glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance)
actual fun glDrawRangeElements(mode: UInt, start: UInt, end: UInt, count: Int, type: UInt, indices: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glDrawRangeElements(mode, start, end, count, type, indices)
actual fun glDrawRangeElementsBaseVertex(mode: UInt, start: UInt, end: UInt, count: Int, type: UInt, indices: kotlinx.cinterop.CValuesRef<*>?, basevertex: Int): Unit = com.kgl.opengl.glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex)
actual fun glDrawTransformFeedback(mode: UInt, id: UInt): Unit = com.kgl.opengl.glDrawTransformFeedback(mode, id)
actual fun glDrawTransformFeedbackInstanced(mode: UInt, id: UInt, instancecount: Int): Unit = com.kgl.opengl.glDrawTransformFeedbackInstanced(mode, id, instancecount)
actual fun glDrawTransformFeedbackStream(mode: UInt, id: UInt, stream: UInt): Unit = com.kgl.opengl.glDrawTransformFeedbackStream(mode, id, stream)
actual fun glDrawTransformFeedbackStreamInstanced(mode: UInt, id: UInt, stream: UInt, instancecount: Int): Unit = com.kgl.opengl.glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount)
actual fun glEnable(cap: UInt): Unit = com.kgl.opengl.glEnable(cap)
actual fun glEnableVertexArrayAttrib(vaobj: UInt, index: UInt): Unit = com.kgl.opengl.glEnableVertexArrayAttrib(vaobj, index)
actual fun glEnableVertexAttribArray(index: UInt): Unit = com.kgl.opengl.glEnableVertexAttribArray(index)
actual fun glEnablei(target: UInt, index: UInt): Unit = com.kgl.opengl.glEnablei(target, index)
actual fun glEndConditionalRender(): Unit = com.kgl.opengl.glEndConditionalRender()
actual fun glEndQuery(target: UInt): Unit = com.kgl.opengl.glEndQuery(target)
actual fun glEndQueryIndexed(target: UInt, index: UInt): Unit = com.kgl.opengl.glEndQueryIndexed(target, index)
actual fun glEndTransformFeedback(): Unit = com.kgl.opengl.glEndTransformFeedback()
actual fun glFenceSync(condition: UInt, flags: UInt): kotlinx.cinterop.CPointer<cnames.structs.__GLsync>? = com.kgl.opengl.glFenceSync(condition, flags)
actual fun glFinish(): Unit = com.kgl.opengl.glFinish()
actual fun glFlush(): Unit = com.kgl.opengl.glFlush()
actual fun glFlushMappedBufferRange(target: UInt, offset: Long, length: Long): Unit = com.kgl.opengl.glFlushMappedBufferRange(target, offset, length)
actual fun glFlushMappedNamedBufferRange(buffer: UInt, offset: Long, length: Long): Unit = com.kgl.opengl.glFlushMappedNamedBufferRange(buffer, offset, length)
actual fun glFramebufferParameteri(target: UInt, pname: UInt, param: Int): Unit = com.kgl.opengl.glFramebufferParameteri(target, pname, param)
actual fun glFramebufferRenderbuffer(target: UInt, attachment: UInt, renderbuffertarget: UInt, renderbuffer: UInt): Unit = com.kgl.opengl.glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer)
actual fun glFramebufferTexture(target: UInt, attachment: UInt, texture: UInt, level: Int): Unit = com.kgl.opengl.glFramebufferTexture(target, attachment, texture, level)
actual fun glFramebufferTexture1D(target: UInt, attachment: UInt, textarget: UInt, texture: UInt, level: Int): Unit = com.kgl.opengl.glFramebufferTexture1D(target, attachment, textarget, texture, level)
actual fun glFramebufferTexture2D(target: UInt, attachment: UInt, textarget: UInt, texture: UInt, level: Int): Unit = com.kgl.opengl.glFramebufferTexture2D(target, attachment, textarget, texture, level)
actual fun glFramebufferTexture3D(target: UInt, attachment: UInt, textarget: UInt, texture: UInt, level: Int, zoffset: Int): Unit = com.kgl.opengl.glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset)
actual fun glFramebufferTextureLayer(target: UInt, attachment: UInt, texture: UInt, level: Int, layer: Int): Unit = com.kgl.opengl.glFramebufferTextureLayer(target, attachment, texture, level, layer)
actual fun glFrontFace(mode: UInt): Unit = com.kgl.opengl.glFrontFace(mode)
actual fun glGenBuffer(): UInt = com.kgl.opengl.glGenBuffer()
actual fun glGenBuffers(n: Int, buffers: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glGenBuffers(n, buffers)
actual fun glGenFramebuffer(): UInt = com.kgl.opengl.glGenFramebuffer()
actual fun glGenFramebuffers(n: Int, framebuffers: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glGenFramebuffers(n, framebuffers)
actual fun glGenProgramPipeline(): UInt = com.kgl.opengl.glGenProgramPipeline()
actual fun glGenProgramPipelines(n: Int, pipelines: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glGenProgramPipelines(n, pipelines)
actual fun glGenQueries(n: Int, ids: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glGenQueries(n, ids)
actual fun glGenQuery(): UInt = com.kgl.opengl.glGenQuery()
actual fun glGenRenderbuffer(): UInt = com.kgl.opengl.glGenRenderbuffer()
actual fun glGenRenderbuffers(n: Int, renderbuffers: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glGenRenderbuffers(n, renderbuffers)
actual fun glGenSampler(): UInt = com.kgl.opengl.glGenSampler()
actual fun glGenSamplers(count: Int, samplers: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glGenSamplers(count, samplers)
actual fun glGenTexture(): UInt = com.kgl.opengl.glGenTexture()
actual fun glGenTextures(n: Int, textures: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glGenTextures(n, textures)
actual fun glGenTransformFeedback(): UInt = com.kgl.opengl.glGenTransformFeedback()
actual fun glGenTransformFeedbacks(n: Int, ids: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glGenTransformFeedbacks(n, ids)
actual fun glGenVertexArray(): UInt = com.kgl.opengl.glGenVertexArray()
actual fun glGenVertexArrays(n: Int, arrays: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glGenVertexArrays(n, arrays)
actual fun glGenerateMipmap(target: UInt): Unit = com.kgl.opengl.glGenerateMipmap(target)
actual fun glGenerateTextureMipmap(texture: UInt): Unit = com.kgl.opengl.glGenerateTextureMipmap(texture)
actual fun glGetActiveAtomicCounterBufferi(program: UInt, bufferIndex: UInt, pname: UInt): Int = com.kgl.opengl.glGetActiveAtomicCounterBufferi(program, bufferIndex, pname)
actual fun glGetActiveAtomicCounterBufferiv(program: UInt, bufferIndex: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params)
actual fun glGetActiveAttrib(program: UInt, index: UInt, bufSize: Int, length: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, size: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, type: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?, name: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glGetActiveAttrib(program, index, bufSize, length, size, type, name)
actual fun glGetActiveSubroutineName(program: UInt, shadertype: UInt, index: UInt, bufsize: Int, length: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, name: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name)
actual fun glGetActiveSubroutineUniformName(program: UInt, shadertype: UInt, index: UInt, bufsize: Int, length: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, name: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name)
actual fun glGetActiveSubroutineUniformi(program: UInt, shadertype: UInt, index: UInt, pname: UInt): Int = com.kgl.opengl.glGetActiveSubroutineUniformi(program, shadertype, index, pname)
actual fun glGetActiveSubroutineUniformiv(program: UInt, shadertype: UInt, index: UInt, pname: UInt, values: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values)
actual fun glGetActiveUniform(program: UInt, index: UInt, bufSize: Int, length: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, size: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, type: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?, name: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glGetActiveUniform(program, index, bufSize, length, size, type, name)
actual fun glGetActiveUniformBlockName(program: UInt, uniformBlockIndex: UInt, bufSize: Int, length: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, uniformBlockName: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName)
actual fun glGetActiveUniformBlocki(program: UInt, uniformBlockIndex: UInt, pname: UInt): Int = com.kgl.opengl.glGetActiveUniformBlocki(program, uniformBlockIndex, pname)
actual fun glGetActiveUniformBlockiv(program: UInt, uniformBlockIndex: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params)
actual fun glGetActiveUniformName(program: UInt, uniformIndex: UInt, bufSize: Int, length: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, uniformName: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName)
actual fun glGetActiveUniformsi(program: UInt, uniformCount: Int, uniformIndices: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?, pname: UInt): Int = com.kgl.opengl.glGetActiveUniformsi(program, uniformCount, uniformIndices, pname)
actual fun glGetActiveUniformsiv(program: UInt, uniformCount: Int, uniformIndices: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params)
actual fun glGetAttachedShaders(program: UInt, maxCount: Int, count: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, shaders: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glGetAttachedShaders(program, maxCount, count, shaders)
actual fun glGetAttribLocation(program: UInt, name: String): Int = com.kgl.opengl.glGetAttribLocation(program, name)
actual fun glGetAttribLocation(program: UInt, name: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): Int = com.kgl.opengl.glGetAttribLocation(program, name)
actual fun glGetBoolean(pname: UInt): UByte = com.kgl.opengl.glGetBoolean(pname)
actual fun glGetBoolean(target: UInt, index: UInt): UByte = com.kgl.opengl.glGetBoolean(target, index)
actual fun glGetBooleani_v(target: UInt, index: UInt, data: kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<UByte>>?): Unit = com.kgl.opengl.glGetBooleani_v(target, index, data)
actual fun glGetBooleanv(pname: UInt, data: kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<UByte>>?): Unit = com.kgl.opengl.glGetBooleanv(pname, data)
actual fun glGetBufferParameteri(target: UInt, pname: UInt): Int = com.kgl.opengl.glGetBufferParameteri(target, pname)
actual fun glGetBufferParameteri64(target: UInt, pname: UInt): Long = com.kgl.opengl.glGetBufferParameteri64(target, pname)
actual fun glGetBufferParameteri64v(target: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVarOf<Long>>?): Unit = com.kgl.opengl.glGetBufferParameteri64v(target, pname, params)
actual fun glGetBufferParameteriv(target: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetBufferParameteriv(target, pname, params)
actual fun glGetBufferPointerv(target: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>>>?): Unit = com.kgl.opengl.glGetBufferPointerv(target, pname, params )
actual fun glGetBufferSubData(target: UInt, offset: Long, size: Long, data: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): Unit = com.kgl.opengl.glGetBufferSubData(target, offset, size, data )
actual fun glGetCompressedTexImage(target: UInt, level: Int, img: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): Unit = com.kgl.opengl.glGetCompressedTexImage(target, level, img )
actual fun glGetCompressedTextureImage(texture: UInt, level: Int, bufSize: Int, pixels: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): Unit = com.kgl.opengl.glGetCompressedTextureImage(texture, level, bufSize, pixels )
actual fun glGetCompressedTextureSubImage(texture: UInt, level: Int, xoffset: Int, yoffset: Int, zoffset: Int, width: Int, height: Int, depth: Int, bufSize: Int, pixels: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): Unit = com.kgl.opengl.glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels )
actual fun glGetDebugMessageLog(count: UInt, bufSize: Int, sources: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?, types: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?, ids: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?, severities: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?, lengths: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, messageLog: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<Byte>>?): UInt = com.kgl.opengl.glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog)
actual fun glGetDouble(pname: UInt): Double = com.kgl.opengl.glGetDouble(pname)
actual fun glGetDouble(target: UInt, index: UInt): Double = com.kgl.opengl.glGetDouble(target, index)
actual fun glGetDoublei_v(target: UInt, index: UInt, data: kotlinx.cinterop.CPointer<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glGetDoublei_v(target, index, data)
actual fun glGetDoublev(pname: UInt, data: kotlinx.cinterop.CPointer<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glGetDoublev(pname, data)
actual fun glGetError(): UInt = com.kgl.opengl.glGetError()
actual fun glGetFloat(pname: UInt): Float = com.kgl.opengl.glGetFloat(pname)
actual fun glGetFloat(target: UInt, index: UInt): Float = com.kgl.opengl.glGetFloat(target, index)
actual fun glGetFloati_v(target: UInt, index: UInt, data: kotlinx.cinterop.CPointer<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glGetFloati_v(target, index, data)
actual fun glGetFloatv(pname: UInt, data: kotlinx.cinterop.CPointer<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glGetFloatv(pname, data)
actual fun glGetFragDataIndex(program: UInt, name: String): Int = com.kgl.opengl.glGetFragDataIndex(program, name)
actual fun glGetFragDataIndex(program: UInt, name: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): Int = com.kgl.opengl.glGetFragDataIndex(program, name)
actual fun glGetFragDataLocation(program: UInt, name: String): Int = com.kgl.opengl.glGetFragDataLocation(program, name)
actual fun glGetFragDataLocation(program: UInt, name: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): Int = com.kgl.opengl.glGetFragDataLocation(program, name)
actual fun glGetFramebufferAttachmentParameteri(target: UInt, attachment: UInt, pname: UInt): Int = com.kgl.opengl.glGetFramebufferAttachmentParameteri(target, attachment, pname)
actual fun glGetFramebufferAttachmentParameteriv(target: UInt, attachment: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetFramebufferAttachmentParameteriv(target, attachment, pname, params)
actual fun glGetFramebufferParameteri(target: UInt, pname: UInt): Int = com.kgl.opengl.glGetFramebufferParameteri(target, pname)
actual fun glGetFramebufferParameteriv(target: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetFramebufferParameteriv(target, pname, params)
actual fun glGetGraphicsResetStatus(): UInt = com.kgl.opengl.glGetGraphicsResetStatus()
actual fun glGetInteger(pname: UInt): Int = com.kgl.opengl.glGetInteger(pname)
actual fun glGetInteger(target: UInt, index: UInt): Int = com.kgl.opengl.glGetInteger(target, index)
actual fun glGetInteger64(pname: UInt): Long = com.kgl.opengl.glGetInteger64(pname)
actual fun glGetInteger64(target: UInt, index: UInt): Long = com.kgl.opengl.glGetInteger64(target, index)
actual fun glGetInteger64i_v(target: UInt, index: UInt, data: kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVarOf<Long>>?): Unit = com.kgl.opengl.glGetInteger64i_v(target, index, data)
actual fun glGetInteger64v(pname: UInt, data: kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVarOf<Long>>?): Unit = com.kgl.opengl.glGetInteger64v(pname, data)
actual fun glGetIntegeri_v(target: UInt, index: UInt, data: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetIntegeri_v(target, index, data)
actual fun glGetIntegerv(pname: UInt, data: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetIntegerv(pname, data)
actual fun glGetInternalformati(target: UInt, internalformat: UInt, pname: UInt, bufSize: Int): Int = com.kgl.opengl.glGetInternalformati(target, internalformat, pname, bufSize)
actual fun glGetInternalformati64(target: UInt, internalformat: UInt, pname: UInt, bufSize: Int): Long = com.kgl.opengl.glGetInternalformati64(target, internalformat, pname, bufSize)
actual fun glGetInternalformati64v(target: UInt, internalformat: UInt, pname: UInt, bufSize: Int, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVarOf<Long>>?): Unit = com.kgl.opengl.glGetInternalformati64v(target, internalformat, pname, bufSize, params)
actual fun glGetInternalformativ(target: UInt, internalformat: UInt, pname: UInt, bufSize: Int, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetInternalformativ(target, internalformat, pname, bufSize, params)
actual fun glGetMultisamplef(pname: UInt, index: UInt): Float = com.kgl.opengl.glGetMultisamplef(pname, index)
actual fun glGetMultisamplefv(pname: UInt, index: UInt, `val`: kotlinx.cinterop.CPointer<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glGetMultisamplefv(pname, index, `val`)
actual fun glGetNamedBufferParameteri(buffer: UInt, pname: UInt): Int = com.kgl.opengl.glGetNamedBufferParameteri(buffer, pname)
actual fun glGetNamedBufferParameteri64(buffer: UInt, pname: UInt): Long = com.kgl.opengl.glGetNamedBufferParameteri64(buffer, pname)
actual fun glGetNamedBufferParameteri64v(buffer: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVarOf<Long>>?): Unit = com.kgl.opengl.glGetNamedBufferParameteri64v(buffer, pname, params)
actual fun glGetNamedBufferParameteriv(buffer: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetNamedBufferParameteriv(buffer, pname, params)
actual fun glGetNamedBufferPointerv(buffer: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>>>?): Unit = com.kgl.opengl.glGetNamedBufferPointerv(buffer, pname, params )
actual fun glGetNamedBufferSubData(buffer: UInt, offset: Long, size: Long, data: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): Unit = com.kgl.opengl.glGetNamedBufferSubData(buffer, offset, size, data )
actual fun glGetNamedFramebufferAttachmentParameteri(framebuffer: UInt, attachment: UInt, pname: UInt): Int = com.kgl.opengl.glGetNamedFramebufferAttachmentParameteri(framebuffer, attachment, pname)
actual fun glGetNamedFramebufferAttachmentParameteriv(framebuffer: UInt, attachment: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params)
actual fun glGetNamedFramebufferParameteri(framebuffer: UInt, pname: UInt): Int = com.kgl.opengl.glGetNamedFramebufferParameteri(framebuffer, pname)
actual fun glGetNamedFramebufferParameteriv(framebuffer: UInt, pname: UInt, param: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetNamedFramebufferParameteriv(framebuffer, pname, param)
actual fun glGetNamedRenderbufferParameteri(renderbuffer: UInt, pname: UInt): Int = com.kgl.opengl.glGetNamedRenderbufferParameteri(renderbuffer, pname)
actual fun glGetNamedRenderbufferParameteriv(renderbuffer: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetNamedRenderbufferParameteriv(renderbuffer, pname, params)
actual fun glGetObjectLabel(identifier: UInt, name: UInt, bufSize: Int, length: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, label: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glGetObjectLabel(identifier, name, bufSize, length, label)
actual fun glGetObjectPtrLabel(ptr: kotlinx.cinterop.CValuesRef<*>?, bufSize: Int, length: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, label: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glGetObjectPtrLabel(ptr, bufSize, length, label)
actual fun glGetPointerv(pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>>>?): Unit = com.kgl.opengl.glGetPointerv(pname, params )
actual fun glGetProgramBinary(program: UInt, bufSize: Int, length: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, binaryFormat: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?, binary: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): Unit = com.kgl.opengl.glGetProgramBinary(program, bufSize, length, binaryFormat, binary )
actual fun glGetProgramInfoLog(program: UInt, bufSize: Int, length: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, infoLog: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glGetProgramInfoLog(program, bufSize, length, infoLog)
actual fun glGetProgramInfoLog(program: UInt): String = com.kgl.opengl.glGetProgramInfoLog(program)
actual fun glGetProgramInterfacei(program: UInt, programInterface: UInt, pname: UInt): Int = com.kgl.opengl.glGetProgramInterfacei(program, programInterface, pname)
actual fun glGetProgramInterfaceiv(program: UInt, programInterface: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetProgramInterfaceiv(program, programInterface, pname, params)
actual fun glGetProgramPipelineInfoLog(pipeline: UInt, bufSize: Int, length: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, infoLog: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog)
actual fun glGetProgramPipelinei(pipeline: UInt, pname: UInt): Int = com.kgl.opengl.glGetProgramPipelinei(pipeline, pname)
actual fun glGetProgramPipelineiv(pipeline: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetProgramPipelineiv(pipeline, pname, params)
actual fun glGetProgramResourceIndex(program: UInt, programInterface: UInt, name: String): UInt = com.kgl.opengl.glGetProgramResourceIndex(program, programInterface, name)
actual fun glGetProgramResourceIndex(program: UInt, programInterface: UInt, name: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): UInt = com.kgl.opengl.glGetProgramResourceIndex(program, programInterface, name)
actual fun glGetProgramResourceLocation(program: UInt, programInterface: UInt, name: String): Int = com.kgl.opengl.glGetProgramResourceLocation(program, programInterface, name)
actual fun glGetProgramResourceLocation(program: UInt, programInterface: UInt, name: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): Int = com.kgl.opengl.glGetProgramResourceLocation(program, programInterface, name)
actual fun glGetProgramResourceLocationIndex(program: UInt, programInterface: UInt, name: String): Int = com.kgl.opengl.glGetProgramResourceLocationIndex(program, programInterface, name)
actual fun glGetProgramResourceLocationIndex(program: UInt, programInterface: UInt, name: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): Int = com.kgl.opengl.glGetProgramResourceLocationIndex(program, programInterface, name)
actual fun glGetProgramResourceName(program: UInt, programInterface: UInt, index: UInt, bufSize: Int, length: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, name: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glGetProgramResourceName(program, programInterface, index, bufSize, length, name)
actual fun glGetProgramResourcei(program: UInt, programInterface: UInt, index: UInt, propCount: Int, props: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?, bufSize: Int, length: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Int = com.kgl.opengl.glGetProgramResourcei(program, programInterface, index, propCount, props, bufSize, length)
actual fun glGetProgramResourceiv(program: UInt, programInterface: UInt, index: UInt, propCount: Int, props: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?, bufSize: Int, length: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params)
actual fun glGetProgramStagei(program: UInt, shadertype: UInt, pname: UInt): Int = com.kgl.opengl.glGetProgramStagei(program, shadertype, pname)
actual fun glGetProgramStageiv(program: UInt, shadertype: UInt, pname: UInt, values: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetProgramStageiv(program, shadertype, pname, values)
actual fun glGetProgrami(program: UInt, pname: UInt): Int = com.kgl.opengl.glGetProgrami(program, pname)
actual fun glGetProgramiv(program: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetProgramiv(program, pname, params)
actual fun glGetQueryBufferObjecti64v(id: UInt, buffer: UInt, pname: UInt, offset: Long): Unit = com.kgl.opengl.glGetQueryBufferObjecti64v(id, buffer, pname, offset)
actual fun glGetQueryBufferObjectiv(id: UInt, buffer: UInt, pname: UInt, offset: Long): Unit = com.kgl.opengl.glGetQueryBufferObjectiv(id, buffer, pname, offset)
actual fun glGetQueryBufferObjectui64v(id: UInt, buffer: UInt, pname: UInt, offset: Long): Unit = com.kgl.opengl.glGetQueryBufferObjectui64v(id, buffer, pname, offset)
actual fun glGetQueryBufferObjectuiv(id: UInt, buffer: UInt, pname: UInt, offset: Long): Unit = com.kgl.opengl.glGetQueryBufferObjectuiv(id, buffer, pname, offset)
actual fun glGetQueryIndexedi(target: UInt, index: UInt, pname: UInt): Int = com.kgl.opengl.glGetQueryIndexedi(target, index, pname)
actual fun glGetQueryIndexediv(target: UInt, index: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetQueryIndexediv(target, index, pname, params)
actual fun glGetQueryObjecti(id: UInt, pname: UInt): Int = com.kgl.opengl.glGetQueryObjecti(id, pname)
actual fun glGetQueryObjecti64(id: UInt, pname: UInt): Long = com.kgl.opengl.glGetQueryObjecti64(id, pname)
actual fun glGetQueryObjecti64v(id: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVarOf<Long>>?): Unit = com.kgl.opengl.glGetQueryObjecti64v(id, pname, params)
actual fun glGetQueryObjectiv(id: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetQueryObjectiv(id, pname, params)
actual fun glGetQueryObjectui(id: UInt, pname: UInt): UInt = com.kgl.opengl.glGetQueryObjectui(id, pname)
actual fun glGetQueryObjectui64(id: UInt, pname: UInt): ULong = com.kgl.opengl.glGetQueryObjectui64(id, pname)
actual fun glGetQueryObjectui64v(id: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.ULongVarOf<ULong>>?): Unit = com.kgl.opengl.glGetQueryObjectui64v(id, pname, params)
actual fun glGetQueryObjectuiv(id: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glGetQueryObjectuiv(id, pname, params)
actual fun glGetQueryi(target: UInt, pname: UInt): Int = com.kgl.opengl.glGetQueryi(target, pname)
actual fun glGetQueryiv(target: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetQueryiv(target, pname, params)
actual fun glGetRenderbufferParameteri(target: UInt, pname: UInt): Int = com.kgl.opengl.glGetRenderbufferParameteri(target, pname)
actual fun glGetRenderbufferParameteriv(target: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetRenderbufferParameteriv(target, pname, params)
actual fun glGetSamplerParameterIi(sampler: UInt, pname: UInt): Int = com.kgl.opengl.glGetSamplerParameterIi(sampler, pname)
actual fun glGetSamplerParameterIiv(sampler: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetSamplerParameterIiv(sampler, pname, params)
actual fun glGetSamplerParameterIui(sampler: UInt, pname: UInt): UInt = com.kgl.opengl.glGetSamplerParameterIui(sampler, pname)
actual fun glGetSamplerParameterIuiv(sampler: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glGetSamplerParameterIuiv(sampler, pname, params)
actual fun glGetSamplerParameterf(sampler: UInt, pname: UInt): Float = com.kgl.opengl.glGetSamplerParameterf(sampler, pname)
actual fun glGetSamplerParameterfv(sampler: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glGetSamplerParameterfv(sampler, pname, params)
actual fun glGetSamplerParameteri(sampler: UInt, pname: UInt): Int = com.kgl.opengl.glGetSamplerParameteri(sampler, pname)
actual fun glGetSamplerParameteriv(sampler: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetSamplerParameteriv(sampler, pname, params)
actual fun glGetShaderInfoLog(shader: UInt, bufSize: Int, length: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, infoLog: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glGetShaderInfoLog(shader, bufSize, length, infoLog)
actual fun glGetShaderInfoLog(shader: UInt): String = com.kgl.opengl.glGetShaderInfoLog(shader)
actual fun glGetShaderPrecisionFormat(shadertype: UInt, precisiontype: UInt, range: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, precision: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision)
actual fun glGetShaderSource(shader: UInt, bufSize: Int, length: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, source: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glGetShaderSource(shader, bufSize, length, source)
actual fun glGetShaderi(shader: UInt, pname: UInt): Int = com.kgl.opengl.glGetShaderi(shader, pname)
actual fun glGetShaderiv(shader: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetShaderiv(shader, pname, params)
actual fun glGetString(name: UInt): String? = com.kgl.opengl.glGetString(name)
actual fun glGetStringi(name: UInt, index: UInt): String? = com.kgl.opengl.glGetStringi(name, index)
actual fun glGetSubroutineIndex(program: UInt, shadertype: UInt, name: String): UInt = com.kgl.opengl.glGetSubroutineIndex(program, shadertype, name)
actual fun glGetSubroutineIndex(program: UInt, shadertype: UInt, name: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): UInt = com.kgl.opengl.glGetSubroutineIndex(program, shadertype, name)
actual fun glGetSubroutineUniformLocation(program: UInt, shadertype: UInt, name: String): Int = com.kgl.opengl.glGetSubroutineUniformLocation(program, shadertype, name)
actual fun glGetSubroutineUniformLocation(program: UInt, shadertype: UInt, name: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): Int = com.kgl.opengl.glGetSubroutineUniformLocation(program, shadertype, name)
actual fun glGetSynci(sync: kotlinx.cinterop.CPointer<cnames.structs.__GLsync>?, pname: UInt, bufSize: Int, length: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Int = com.kgl.opengl.glGetSynci(sync, pname, bufSize, length)
actual fun glGetSynciv(sync: kotlinx.cinterop.CPointer<cnames.structs.__GLsync>?, pname: UInt, bufSize: Int, length: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, values: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetSynciv(sync, pname, bufSize, length, values)
actual fun glGetTexImage(target: UInt, level: Int, format: UInt, type: UInt, pixels: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): Unit = com.kgl.opengl.glGetTexImage(target, level, format, type, pixels )
actual fun glGetTexLevelParameterf(target: UInt, level: Int, pname: UInt): Float = com.kgl.opengl.glGetTexLevelParameterf(target, level, pname)
actual fun glGetTexLevelParameterfv(target: UInt, level: Int, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glGetTexLevelParameterfv(target, level, pname, params)
actual fun glGetTexLevelParameteri(target: UInt, level: Int, pname: UInt): Int = com.kgl.opengl.glGetTexLevelParameteri(target, level, pname)
actual fun glGetTexLevelParameteriv(target: UInt, level: Int, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetTexLevelParameteriv(target, level, pname, params)
actual fun glGetTexParameterIi(target: UInt, pname: UInt): Int = com.kgl.opengl.glGetTexParameterIi(target, pname)
actual fun glGetTexParameterIiv(target: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetTexParameterIiv(target, pname, params)
actual fun glGetTexParameterIui(target: UInt, pname: UInt): UInt = com.kgl.opengl.glGetTexParameterIui(target, pname)
actual fun glGetTexParameterIuiv(target: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glGetTexParameterIuiv(target, pname, params)
actual fun glGetTexParameterf(target: UInt, pname: UInt): Float = com.kgl.opengl.glGetTexParameterf(target, pname)
actual fun glGetTexParameterfv(target: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glGetTexParameterfv(target, pname, params)
actual fun glGetTexParameteri(target: UInt, pname: UInt): Int = com.kgl.opengl.glGetTexParameteri(target, pname)
actual fun glGetTexParameteriv(target: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetTexParameteriv(target, pname, params)
actual fun glGetTextureImage(texture: UInt, level: Int, format: UInt, type: UInt, bufSize: Int, pixels: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): Unit = com.kgl.opengl.glGetTextureImage(texture, level, format, type, bufSize, pixels )
actual fun glGetTextureLevelParameterf(texture: UInt, level: Int, pname: UInt): Float = com.kgl.opengl.glGetTextureLevelParameterf(texture, level, pname)
actual fun glGetTextureLevelParameterfv(texture: UInt, level: Int, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glGetTextureLevelParameterfv(texture, level, pname, params)
actual fun glGetTextureLevelParameteri(texture: UInt, level: Int, pname: UInt): Int = com.kgl.opengl.glGetTextureLevelParameteri(texture, level, pname)
actual fun glGetTextureLevelParameteriv(texture: UInt, level: Int, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetTextureLevelParameteriv(texture, level, pname, params)
actual fun glGetTextureParameterIi(texture: UInt, pname: UInt): Int = com.kgl.opengl.glGetTextureParameterIi(texture, pname)
actual fun glGetTextureParameterIiv(texture: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetTextureParameterIiv(texture, pname, params)
actual fun glGetTextureParameterIui(texture: UInt, pname: UInt): UInt = com.kgl.opengl.glGetTextureParameterIui(texture, pname)
actual fun glGetTextureParameterIuiv(texture: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glGetTextureParameterIuiv(texture, pname, params)
actual fun glGetTextureParameterf(texture: UInt, pname: UInt): Float = com.kgl.opengl.glGetTextureParameterf(texture, pname)
actual fun glGetTextureParameterfv(texture: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glGetTextureParameterfv(texture, pname, params)
actual fun glGetTextureParameteri(texture: UInt, pname: UInt): Int = com.kgl.opengl.glGetTextureParameteri(texture, pname)
actual fun glGetTextureParameteriv(texture: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetTextureParameteriv(texture, pname, params)
actual fun glGetTextureSubImage(texture: UInt, level: Int, xoffset: Int, yoffset: Int, zoffset: Int, width: Int, height: Int, depth: Int, format: UInt, type: UInt, bufSize: Int, pixels: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): Unit = com.kgl.opengl.glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels )
actual fun glGetTransformFeedback(xfb: UInt, pname: UInt, index: UInt): Int = com.kgl.opengl.glGetTransformFeedback(xfb, pname, index)
actual fun glGetTransformFeedbackVarying(program: UInt, index: UInt, bufSize: Int, length: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, size: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?, type: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?, name: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name)
actual fun glGetTransformFeedbacki(xfb: UInt, pname: UInt): Int = com.kgl.opengl.glGetTransformFeedbacki(xfb, pname)
actual fun glGetTransformFeedbacki64_(xfb: UInt, pname: UInt, index: UInt): Long = com.kgl.opengl.glGetTransformFeedbacki64_(xfb, pname, index)
actual fun glGetTransformFeedbacki64_v(xfb: UInt, pname: UInt, index: UInt, param: kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVarOf<Long>>?): Unit = com.kgl.opengl.glGetTransformFeedbacki64_v(xfb, pname, index, param)
actual fun glGetTransformFeedbacki_v(xfb: UInt, pname: UInt, index: UInt, param: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetTransformFeedbacki_v(xfb, pname, index, param)
actual fun glGetTransformFeedbackiv(xfb: UInt, pname: UInt, param: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetTransformFeedbackiv(xfb, pname, param)
actual fun glGetUniformBlockIndex(program: UInt, uniformBlockName: String): UInt = com.kgl.opengl.glGetUniformBlockIndex(program, uniformBlockName)
actual fun glGetUniformBlockIndex(program: UInt, uniformBlockName: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): UInt = com.kgl.opengl.glGetUniformBlockIndex(program, uniformBlockName)
actual fun glGetUniformIndices(program: UInt, uniformCount: Int, uniformNames: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVarOf<Byte>> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<Byte>>> */>?, uniformIndices: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glGetUniformIndices(program, uniformCount, uniformNames , uniformIndices)
actual fun glGetUniformLocation(program: UInt, name: String): Int = com.kgl.opengl.glGetUniformLocation(program, name)
actual fun glGetUniformLocation(program: UInt, name: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): Int = com.kgl.opengl.glGetUniformLocation(program, name)
actual fun glGetUniformSubroutineui(shadertype: UInt, location: Int): UInt = com.kgl.opengl.glGetUniformSubroutineui(shadertype, location)
actual fun glGetUniformSubroutineuiv(shadertype: UInt, location: Int, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glGetUniformSubroutineuiv(shadertype, location, params)
actual fun glGetUniformd(program: UInt, location: Int): Double = com.kgl.opengl.glGetUniformd(program, location)
actual fun glGetUniformdv(program: UInt, location: Int, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glGetUniformdv(program, location, params)
actual fun glGetUniformf(program: UInt, location: Int): Float = com.kgl.opengl.glGetUniformf(program, location)
actual fun glGetUniformfv(program: UInt, location: Int, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glGetUniformfv(program, location, params)
actual fun glGetUniformi(program: UInt, location: Int): Int = com.kgl.opengl.glGetUniformi(program, location)
actual fun glGetUniformiv(program: UInt, location: Int, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetUniformiv(program, location, params)
actual fun glGetUniformui(program: UInt, location: Int): UInt = com.kgl.opengl.glGetUniformui(program, location)
actual fun glGetUniformuiv(program: UInt, location: Int, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glGetUniformuiv(program, location, params)
actual fun glGetVertexArrayIndexed64i(vaobj: UInt, index: UInt, pname: UInt): Long = com.kgl.opengl.glGetVertexArrayIndexed64i(vaobj, index, pname)
actual fun glGetVertexArrayIndexed64iv(vaobj: UInt, index: UInt, pname: UInt, param: kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVarOf<Long>>?): Unit = com.kgl.opengl.glGetVertexArrayIndexed64iv(vaobj, index, pname, param)
actual fun glGetVertexArrayIndexedi(vaobj: UInt, index: UInt, pname: UInt): Int = com.kgl.opengl.glGetVertexArrayIndexedi(vaobj, index, pname)
actual fun glGetVertexArrayIndexediv(vaobj: UInt, index: UInt, pname: UInt, param: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetVertexArrayIndexediv(vaobj, index, pname, param)
actual fun glGetVertexArrayi(vaobj: UInt, pname: UInt): Int = com.kgl.opengl.glGetVertexArrayi(vaobj, pname)
actual fun glGetVertexArrayiv(vaobj: UInt, pname: UInt, param: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetVertexArrayiv(vaobj, pname, param)
actual fun glGetVertexAttribIi(index: UInt, pname: UInt): Int = com.kgl.opengl.glGetVertexAttribIi(index, pname)
actual fun glGetVertexAttribIiv(index: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetVertexAttribIiv(index, pname, params)
actual fun glGetVertexAttribIui(index: UInt, pname: UInt): UInt = com.kgl.opengl.glGetVertexAttribIui(index, pname)
actual fun glGetVertexAttribIuiv(index: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glGetVertexAttribIuiv(index, pname, params)
actual fun glGetVertexAttribLd(index: UInt, pname: UInt): Double = com.kgl.opengl.glGetVertexAttribLd(index, pname)
actual fun glGetVertexAttribLdv(index: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glGetVertexAttribLdv(index, pname, params)
actual fun glGetVertexAttribPointerv(index: UInt, pname: UInt, pointer: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>>>?): Unit = com.kgl.opengl.glGetVertexAttribPointerv(index, pname, pointer )
actual fun glGetVertexAttribd(index: UInt, pname: UInt): Double = com.kgl.opengl.glGetVertexAttribd(index, pname)
actual fun glGetVertexAttribdv(index: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glGetVertexAttribdv(index, pname, params)
actual fun glGetVertexAttribf(index: UInt, pname: UInt): Float = com.kgl.opengl.glGetVertexAttribf(index, pname)
actual fun glGetVertexAttribfv(index: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glGetVertexAttribfv(index, pname, params)
actual fun glGetVertexAttribi(index: UInt, pname: UInt): Int = com.kgl.opengl.glGetVertexAttribi(index, pname)
actual fun glGetVertexAttribiv(index: UInt, pname: UInt, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetVertexAttribiv(index, pname, params)
actual fun glGetnCompressedTexImage(target: UInt, lod: Int, bufSize: Int, pixels: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): Unit = com.kgl.opengl.glGetnCompressedTexImage(target, lod, bufSize, pixels )
actual fun glGetnTexImage(target: UInt, level: Int, format: UInt, type: UInt, bufSize: Int, pixels: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): Unit = com.kgl.opengl.glGetnTexImage(target, level, format, type, bufSize, pixels )
actual fun glGetnUniformd(program: UInt, location: Int, bufSize: Int): Double = com.kgl.opengl.glGetnUniformd(program, location, bufSize)
actual fun glGetnUniformdv(program: UInt, location: Int, bufSize: Int, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glGetnUniformdv(program, location, bufSize, params)
actual fun glGetnUniformf(program: UInt, location: Int, bufSize: Int): Float = com.kgl.opengl.glGetnUniformf(program, location, bufSize)
actual fun glGetnUniformfv(program: UInt, location: Int, bufSize: Int, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glGetnUniformfv(program, location, bufSize, params)
actual fun glGetnUniformi(program: UInt, location: Int, bufSize: Int): Int = com.kgl.opengl.glGetnUniformi(program, location, bufSize)
actual fun glGetnUniformiv(program: UInt, location: Int, bufSize: Int, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glGetnUniformiv(program, location, bufSize, params)
actual fun glGetnUniformui(program: UInt, location: Int, bufSize: Int): UInt = com.kgl.opengl.glGetnUniformui(program, location, bufSize)
actual fun glGetnUniformuiv(program: UInt, location: Int, bufSize: Int, params: kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glGetnUniformuiv(program, location, bufSize, params)
actual fun glHint(target: UInt, mode: UInt): Unit = com.kgl.opengl.glHint(target, mode)
actual fun glInvalidateBufferData(buffer: UInt): Unit = com.kgl.opengl.glInvalidateBufferData(buffer)
actual fun glInvalidateBufferSubData(buffer: UInt, offset: Long, length: Long): Unit = com.kgl.opengl.glInvalidateBufferSubData(buffer, offset, length)
actual fun glInvalidateFramebuffer(target: UInt, numAttachments: Int, attachments: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glInvalidateFramebuffer(target, numAttachments, attachments)
actual fun glInvalidateNamedFramebufferData(framebuffer: UInt, numAttachments: Int, attachments: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments)
actual fun glInvalidateNamedFramebufferSubData(framebuffer: UInt, numAttachments: Int, attachments: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?, x: Int, y: Int, width: Int, height: Int): Unit = com.kgl.opengl.glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height)
actual fun glInvalidateSubFramebuffer(target: UInt, numAttachments: Int, attachments: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?, x: Int, y: Int, width: Int, height: Int): Unit = com.kgl.opengl.glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height)
actual fun glInvalidateTexImage(texture: UInt, level: Int): Unit = com.kgl.opengl.glInvalidateTexImage(texture, level)
actual fun glInvalidateTexSubImage(texture: UInt, level: Int, xoffset: Int, yoffset: Int, zoffset: Int, width: Int, height: Int, depth: Int): Unit = com.kgl.opengl.glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth)
actual fun glIsBuffer(buffer: UInt): Boolean = com.kgl.opengl.glIsBuffer(buffer)
actual fun glIsEnabled(cap: UInt): Boolean = com.kgl.opengl.glIsEnabled(cap)
actual fun glIsEnabledi(target: UInt, index: UInt): Boolean = com.kgl.opengl.glIsEnabledi(target, index)
actual fun glIsFramebuffer(framebuffer: UInt): Boolean = com.kgl.opengl.glIsFramebuffer(framebuffer)
actual fun glIsProgram(program: UInt): Boolean = com.kgl.opengl.glIsProgram(program)
actual fun glIsProgramPipeline(pipeline: UInt): Boolean = com.kgl.opengl.glIsProgramPipeline(pipeline)
actual fun glIsQuery(id: UInt): Boolean = com.kgl.opengl.glIsQuery(id)
actual fun glIsRenderbuffer(renderbuffer: UInt): Boolean = com.kgl.opengl.glIsRenderbuffer(renderbuffer)
actual fun glIsSampler(sampler: UInt): Boolean = com.kgl.opengl.glIsSampler(sampler)
actual fun glIsShader(shader: UInt): Boolean = com.kgl.opengl.glIsShader(shader)
actual fun glIsSync(sync: kotlinx.cinterop.CPointer<cnames.structs.__GLsync>?): Boolean = com.kgl.opengl.glIsSync(sync)
actual fun glIsTexture(texture: UInt): Boolean = com.kgl.opengl.glIsTexture(texture)
actual fun glIsTransformFeedback(id: UInt): Boolean = com.kgl.opengl.glIsTransformFeedback(id)
actual fun glIsVertexArray(array: UInt): Boolean = com.kgl.opengl.glIsVertexArray(array)
actual fun glLineWidth(width: Float): Unit = com.kgl.opengl.glLineWidth(width)
actual fun glLinkProgram(program: UInt): Unit = com.kgl.opengl.glLinkProgram(program)
actual fun glLogicOp(opcode: UInt): Unit = com.kgl.opengl.glLogicOp(opcode)
actual fun glMapBuffer(target: UInt, access: UInt): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ = com.kgl.opengl.glMapBuffer(target, access)
actual fun glMapBufferRange(target: UInt, offset: Long, length: Long, access: UInt): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ = com.kgl.opengl.glMapBufferRange(target, offset, length, access)
actual fun glMapNamedBuffer(buffer: UInt, access: UInt): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ = com.kgl.opengl.glMapNamedBuffer(buffer, access)
actual fun glMapNamedBufferRange(buffer: UInt, offset: Long, length: Long, access: UInt): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ = com.kgl.opengl.glMapNamedBufferRange(buffer, offset, length, access)
actual fun glMemoryBarrier(barriers: UInt): Unit = com.kgl.opengl.glMemoryBarrier(barriers)
actual fun glMemoryBarrierByRegion(barriers: UInt): Unit = com.kgl.opengl.glMemoryBarrierByRegion(barriers)
actual fun glMinSampleShading(value: Float): Unit = com.kgl.opengl.glMinSampleShading(value)
actual fun glMultiDrawArrays(mode: UInt, first: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?, count: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?, drawcount: Int): Unit = com.kgl.opengl.glMultiDrawArrays(mode, first, count, drawcount)
actual fun glMultiDrawArraysIndirect(mode: UInt, indirect: kotlinx.cinterop.CValuesRef<*>?, drawcount: Int, stride: Int): Unit = com.kgl.opengl.glMultiDrawArraysIndirect(mode, indirect, drawcount, stride)
actual fun glMultiDrawArraysIndirectCount(mode: UInt, indirect: kotlinx.cinterop.CValuesRef<*>?, drawcount: Long, maxdrawcount: Int, stride: Int): Unit = com.kgl.opengl.glMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride)
actual fun glMultiDrawElements(mode: UInt, count: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?, type: UInt, indices: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>>>?, drawcount: Int): Unit = com.kgl.opengl.glMultiDrawElements(mode, count, type, indices , drawcount)
actual fun glMultiDrawElementsBaseVertex(mode: UInt, count: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?, type: UInt, indices: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>>>?, drawcount: Int, basevertex: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glMultiDrawElementsBaseVertex(mode, count, type, indices , drawcount, basevertex)
actual fun glMultiDrawElementsIndirect(mode: UInt, type: UInt, indirect: kotlinx.cinterop.CValuesRef<*>?, drawcount: Int, stride: Int): Unit = com.kgl.opengl.glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride)
actual fun glMultiDrawElementsIndirectCount(mode: UInt, type: UInt, indirect: kotlinx.cinterop.CValuesRef<*>?, drawcount: Long, maxdrawcount: Int, stride: Int): Unit = com.kgl.opengl.glMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride)
actual fun glNamedBufferData(buffer: UInt, size: Long, data: kotlinx.cinterop.CValuesRef<*>?, usage: UInt): Unit = com.kgl.opengl.glNamedBufferData(buffer, size, data, usage)
actual fun glNamedBufferStorage(buffer: UInt, size: Long, data: kotlinx.cinterop.CValuesRef<*>?, flags: UInt): Unit = com.kgl.opengl.glNamedBufferStorage(buffer, size, data, flags)
actual fun glNamedBufferSubData(buffer: UInt, offset: Long, size: Long, data: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glNamedBufferSubData(buffer, offset, size, data)
actual fun glNamedFramebufferDrawBuffer(framebuffer: UInt, buf: UInt): Unit = com.kgl.opengl.glNamedFramebufferDrawBuffer(framebuffer, buf)
actual fun glNamedFramebufferDrawBuffers(framebuffer: UInt, n: Int, bufs: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glNamedFramebufferDrawBuffers(framebuffer, n, bufs)
actual fun glNamedFramebufferParameteri(framebuffer: UInt, pname: UInt, param: Int): Unit = com.kgl.opengl.glNamedFramebufferParameteri(framebuffer, pname, param)
actual fun glNamedFramebufferReadBuffer(framebuffer: UInt, src: UInt): Unit = com.kgl.opengl.glNamedFramebufferReadBuffer(framebuffer, src)
actual fun glNamedFramebufferRenderbuffer(framebuffer: UInt, attachment: UInt, renderbuffertarget: UInt, renderbuffer: UInt): Unit = com.kgl.opengl.glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer)
actual fun glNamedFramebufferTexture(framebuffer: UInt, attachment: UInt, texture: UInt, level: Int): Unit = com.kgl.opengl.glNamedFramebufferTexture(framebuffer, attachment, texture, level)
actual fun glNamedFramebufferTextureLayer(framebuffer: UInt, attachment: UInt, texture: UInt, level: Int, layer: Int): Unit = com.kgl.opengl.glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer)
actual fun glNamedRenderbufferStorage(renderbuffer: UInt, internalformat: UInt, width: Int, height: Int): Unit = com.kgl.opengl.glNamedRenderbufferStorage(renderbuffer, internalformat, width, height)
actual fun glNamedRenderbufferStorageMultisample(renderbuffer: UInt, samples: Int, internalformat: UInt, width: Int, height: Int): Unit = com.kgl.opengl.glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height)
actual fun glObjectLabel(identifier: UInt, name: UInt, length: Int, label: String): Unit = com.kgl.opengl.glObjectLabel(identifier, name, length, label)
actual fun glObjectLabel(identifier: UInt, name: UInt, length: Int, label: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glObjectLabel(identifier, name, length, label)
actual fun glObjectPtrLabel(ptr: kotlinx.cinterop.CValuesRef<*>?, length: Int, label: String): Unit = com.kgl.opengl.glObjectPtrLabel(ptr, length, label)
actual fun glObjectPtrLabel(ptr: kotlinx.cinterop.CValuesRef<*>?, length: Int, label: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glObjectPtrLabel(ptr, length, label)
actual fun glPatchParameterfv(pname: UInt, values: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glPatchParameterfv(pname, values)
actual fun glPatchParameteri(pname: UInt, value: Int): Unit = com.kgl.opengl.glPatchParameteri(pname, value)
actual fun glPauseTransformFeedback(): Unit = com.kgl.opengl.glPauseTransformFeedback()
actual fun glPixelStoref(pname: UInt, param: Float): Unit = com.kgl.opengl.glPixelStoref(pname, param)
actual fun glPixelStorei(pname: UInt, param: Int): Unit = com.kgl.opengl.glPixelStorei(pname, param)
actual fun glPointParameterf(pname: UInt, param: Float): Unit = com.kgl.opengl.glPointParameterf(pname, param)
actual fun glPointParameterfv(pname: UInt, params: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glPointParameterfv(pname, params)
actual fun glPointParameteri(pname: UInt, param: Int): Unit = com.kgl.opengl.glPointParameteri(pname, param)
actual fun glPointParameteriv(pname: UInt, params: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glPointParameteriv(pname, params)
actual fun glPointSize(size: Float): Unit = com.kgl.opengl.glPointSize(size)
actual fun glPolygonMode(face: UInt, mode: UInt): Unit = com.kgl.opengl.glPolygonMode(face, mode)
actual fun glPolygonOffset(factor: Float, units: Float): Unit = com.kgl.opengl.glPolygonOffset(factor, units)
actual fun glPolygonOffsetClamp(factor: Float, units: Float, clamp: Float): Unit = com.kgl.opengl.glPolygonOffsetClamp(factor, units, clamp)
actual fun glPopDebugGroup(): Unit = com.kgl.opengl.glPopDebugGroup()
actual fun glPrimitiveRestartIndex(index: UInt): Unit = com.kgl.opengl.glPrimitiveRestartIndex(index)
actual fun glProgramBinary(program: UInt, binaryFormat: UInt, binary: kotlinx.cinterop.CValuesRef<*>?, length: Int): Unit = com.kgl.opengl.glProgramBinary(program, binaryFormat, binary, length)
actual fun glProgramParameteri(program: UInt, pname: UInt, value: Int): Unit = com.kgl.opengl.glProgramParameteri(program, pname, value)
actual fun glProgramUniform1d(program: UInt, location: Int, v0: Double): Unit = com.kgl.opengl.glProgramUniform1d(program, location, v0)
actual fun glProgramUniform1dv(program: UInt, location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniform1dv(program, location, count, value)
actual fun glProgramUniform1f(program: UInt, location: Int, v0: Float): Unit = com.kgl.opengl.glProgramUniform1f(program, location, v0)
actual fun glProgramUniform1fv(program: UInt, location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniform1fv(program, location, count, value)
actual fun glProgramUniform1i(program: UInt, location: Int, v0: Int): Unit = com.kgl.opengl.glProgramUniform1i(program, location, v0)
actual fun glProgramUniform1iv(program: UInt, location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glProgramUniform1iv(program, location, count, value)
actual fun glProgramUniform1ui(program: UInt, location: Int, v0: UInt): Unit = com.kgl.opengl.glProgramUniform1ui(program, location, v0)
actual fun glProgramUniform1uiv(program: UInt, location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glProgramUniform1uiv(program, location, count, value)
actual fun glProgramUniform2d(program: UInt, location: Int, v0: Double, v1: Double): Unit = com.kgl.opengl.glProgramUniform2d(program, location, v0, v1)
actual fun glProgramUniform2dv(program: UInt, location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniform2dv(program, location, count, value)
actual fun glProgramUniform2f(program: UInt, location: Int, v0: Float, v1: Float): Unit = com.kgl.opengl.glProgramUniform2f(program, location, v0, v1)
actual fun glProgramUniform2fv(program: UInt, location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniform2fv(program, location, count, value)
actual fun glProgramUniform2i(program: UInt, location: Int, v0: Int, v1: Int): Unit = com.kgl.opengl.glProgramUniform2i(program, location, v0, v1)
actual fun glProgramUniform2iv(program: UInt, location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glProgramUniform2iv(program, location, count, value)
actual fun glProgramUniform2ui(program: UInt, location: Int, v0: UInt, v1: UInt): Unit = com.kgl.opengl.glProgramUniform2ui(program, location, v0, v1)
actual fun glProgramUniform2uiv(program: UInt, location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glProgramUniform2uiv(program, location, count, value)
actual fun glProgramUniform3d(program: UInt, location: Int, v0: Double, v1: Double, v2: Double): Unit = com.kgl.opengl.glProgramUniform3d(program, location, v0, v1, v2)
actual fun glProgramUniform3dv(program: UInt, location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniform3dv(program, location, count, value)
actual fun glProgramUniform3f(program: UInt, location: Int, v0: Float, v1: Float, v2: Float): Unit = com.kgl.opengl.glProgramUniform3f(program, location, v0, v1, v2)
actual fun glProgramUniform3fv(program: UInt, location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniform3fv(program, location, count, value)
actual fun glProgramUniform3i(program: UInt, location: Int, v0: Int, v1: Int, v2: Int): Unit = com.kgl.opengl.glProgramUniform3i(program, location, v0, v1, v2)
actual fun glProgramUniform3iv(program: UInt, location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glProgramUniform3iv(program, location, count, value)
actual fun glProgramUniform3ui(program: UInt, location: Int, v0: UInt, v1: UInt, v2: UInt): Unit = com.kgl.opengl.glProgramUniform3ui(program, location, v0, v1, v2)
actual fun glProgramUniform3uiv(program: UInt, location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glProgramUniform3uiv(program, location, count, value)
actual fun glProgramUniform4d(program: UInt, location: Int, v0: Double, v1: Double, v2: Double, v3: Double): Unit = com.kgl.opengl.glProgramUniform4d(program, location, v0, v1, v2, v3)
actual fun glProgramUniform4dv(program: UInt, location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniform4dv(program, location, count, value)
actual fun glProgramUniform4f(program: UInt, location: Int, v0: Float, v1: Float, v2: Float, v3: Float): Unit = com.kgl.opengl.glProgramUniform4f(program, location, v0, v1, v2, v3)
actual fun glProgramUniform4fv(program: UInt, location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniform4fv(program, location, count, value)
actual fun glProgramUniform4i(program: UInt, location: Int, v0: Int, v1: Int, v2: Int, v3: Int): Unit = com.kgl.opengl.glProgramUniform4i(program, location, v0, v1, v2, v3)
actual fun glProgramUniform4iv(program: UInt, location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glProgramUniform4iv(program, location, count, value)
actual fun glProgramUniform4ui(program: UInt, location: Int, v0: UInt, v1: UInt, v2: UInt, v3: UInt): Unit = com.kgl.opengl.glProgramUniform4ui(program, location, v0, v1, v2, v3)
actual fun glProgramUniform4uiv(program: UInt, location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glProgramUniform4uiv(program, location, count, value)
actual fun glProgramUniformMatrix2dv(program: UInt, location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniformMatrix2dv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix2dv(program: UInt, location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniformMatrix2dv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix2fv(program: UInt, location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniformMatrix2fv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix2fv(program: UInt, location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniformMatrix2fv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix2x3dv(program: UInt, location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniformMatrix2x3dv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix2x3dv(program: UInt, location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniformMatrix2x3dv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix2x3fv(program: UInt, location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniformMatrix2x3fv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix2x3fv(program: UInt, location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniformMatrix2x3fv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix2x4dv(program: UInt, location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniformMatrix2x4dv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix2x4dv(program: UInt, location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniformMatrix2x4dv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix2x4fv(program: UInt, location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniformMatrix2x4fv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix2x4fv(program: UInt, location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniformMatrix2x4fv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix3dv(program: UInt, location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniformMatrix3dv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix3dv(program: UInt, location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniformMatrix3dv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix3fv(program: UInt, location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniformMatrix3fv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix3fv(program: UInt, location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniformMatrix3fv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix3x2dv(program: UInt, location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniformMatrix3x2dv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix3x2dv(program: UInt, location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniformMatrix3x2dv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix3x2fv(program: UInt, location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniformMatrix3x2fv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix3x2fv(program: UInt, location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniformMatrix3x2fv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix3x4dv(program: UInt, location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniformMatrix3x4dv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix3x4dv(program: UInt, location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniformMatrix3x4dv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix3x4fv(program: UInt, location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniformMatrix3x4fv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix3x4fv(program: UInt, location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniformMatrix3x4fv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix4dv(program: UInt, location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniformMatrix4dv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix4dv(program: UInt, location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniformMatrix4dv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix4fv(program: UInt, location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniformMatrix4fv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix4fv(program: UInt, location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniformMatrix4fv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix4x2dv(program: UInt, location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniformMatrix4x2dv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix4x2dv(program: UInt, location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniformMatrix4x2dv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix4x2fv(program: UInt, location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniformMatrix4x2fv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix4x2fv(program: UInt, location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniformMatrix4x2fv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix4x3dv(program: UInt, location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniformMatrix4x3dv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix4x3dv(program: UInt, location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glProgramUniformMatrix4x3dv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix4x3fv(program: UInt, location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniformMatrix4x3fv(program, location, count, transpose, value)
actual fun glProgramUniformMatrix4x3fv(program: UInt, location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glProgramUniformMatrix4x3fv(program, location, count, transpose, value)
actual fun glProvokingVertex(mode: UInt): Unit = com.kgl.opengl.glProvokingVertex(mode)
actual fun glPushDebugGroup(source: UInt, id: UInt, length: Int, message: String): Unit = com.kgl.opengl.glPushDebugGroup(source, id, length, message)
actual fun glPushDebugGroup(source: UInt, id: UInt, length: Int, message: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glPushDebugGroup(source, id, length, message)
actual fun glQueryCounter(id: UInt, target: UInt): Unit = com.kgl.opengl.glQueryCounter(id, target)
actual fun glReadBuffer(src: UInt): Unit = com.kgl.opengl.glReadBuffer(src)
actual fun glReadPixels(x: Int, y: Int, width: Int, height: Int, format: UInt, type: UInt, pixels: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): Unit = com.kgl.opengl.glReadPixels(x, y, width, height, format, type, pixels )
actual fun glReadnPixels(x: Int, y: Int, width: Int, height: Int, format: UInt, type: UInt, bufSize: Int, data: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): Unit = com.kgl.opengl.glReadnPixels(x, y, width, height, format, type, bufSize, data )
actual fun glReleaseShaderCompiler(): Unit = com.kgl.opengl.glReleaseShaderCompiler()
actual fun glRenderbufferStorage(target: UInt, internalformat: UInt, width: Int, height: Int): Unit = com.kgl.opengl.glRenderbufferStorage(target, internalformat, width, height)
actual fun glRenderbufferStorageMultisample(target: UInt, samples: Int, internalformat: UInt, width: Int, height: Int): Unit = com.kgl.opengl.glRenderbufferStorageMultisample(target, samples, internalformat, width, height)
actual fun glResumeTransformFeedback(): Unit = com.kgl.opengl.glResumeTransformFeedback()
actual fun glSampleCoverage(value: Float, invert: UByte): Unit = com.kgl.opengl.glSampleCoverage(value, invert)
actual fun glSampleCoverage(value: Float, invert: Boolean): Unit = com.kgl.opengl.glSampleCoverage(value, invert)
actual fun glSampleMaski(maskNumber: UInt, mask: UInt): Unit = com.kgl.opengl.glSampleMaski(maskNumber, mask)
actual fun glSamplerParameterIiv(sampler: UInt, pname: UInt, param: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glSamplerParameterIiv(sampler, pname, param)
actual fun glSamplerParameterIuiv(sampler: UInt, pname: UInt, param: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glSamplerParameterIuiv(sampler, pname, param)
actual fun glSamplerParameterf(sampler: UInt, pname: UInt, param: Float): Unit = com.kgl.opengl.glSamplerParameterf(sampler, pname, param)
actual fun glSamplerParameterfv(sampler: UInt, pname: UInt, param: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glSamplerParameterfv(sampler, pname, param)
actual fun glSamplerParameteri(sampler: UInt, pname: UInt, param: Int): Unit = com.kgl.opengl.glSamplerParameteri(sampler, pname, param)
actual fun glSamplerParameteriv(sampler: UInt, pname: UInt, param: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glSamplerParameteriv(sampler, pname, param)
actual fun glScissor(x: Int, y: Int, width: Int, height: Int): Unit = com.kgl.opengl.glScissor(x, y, width, height)
actual fun glScissorArrayv(first: UInt, count: Int, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glScissorArrayv(first, count, v)
actual fun glScissorIndexed(index: UInt, left: Int, bottom: Int, width: Int, height: Int): Unit = com.kgl.opengl.glScissorIndexed(index, left, bottom, width, height)
actual fun glScissorIndexedv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glScissorIndexedv(index, v)
actual fun glShaderBinary(count: Int, shaders: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?, binaryformat: UInt, binary: kotlinx.cinterop.CValuesRef<*>?, length: Int): Unit = com.kgl.opengl.glShaderBinary(count, shaders, binaryformat, binary, length)
actual fun glShaderSource(shader: UInt, count: Int, string: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVarOf<Byte>> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<Byte>>> */>?, length: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glShaderSource(shader, count, string , length)
actual fun glShaderSource(shader: UInt, string: String): Unit = com.kgl.opengl.glShaderSource(shader, string)
actual fun glShaderSource(shader: UInt, strings: List<String>): Unit = com.kgl.opengl.glShaderSource(shader, strings)
actual fun glShaderStorageBlockBinding(program: UInt, storageBlockIndex: UInt, storageBlockBinding: UInt): Unit = com.kgl.opengl.glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding)
actual fun glSpecializeShader(shader: UInt, pEntryPoint: String, numSpecializationConstants: UInt, pConstantIndex: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?, pConstantValue: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue)
actual fun glSpecializeShader(shader: UInt, pEntryPoint: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?, numSpecializationConstants: UInt, pConstantIndex: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?, pConstantValue: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue)
actual fun glStencilFunc(func: UInt, ref: Int, mask: UInt): Unit = com.kgl.opengl.glStencilFunc(func, ref, mask)
actual fun glStencilFuncSeparate(face: UInt, func: UInt, ref: Int, mask: UInt): Unit = com.kgl.opengl.glStencilFuncSeparate(face, func, ref, mask)
actual fun glStencilMask(mask: UInt): Unit = com.kgl.opengl.glStencilMask(mask)
actual fun glStencilMaskSeparate(face: UInt, mask: UInt): Unit = com.kgl.opengl.glStencilMaskSeparate(face, mask)
actual fun glStencilOp(fail: UInt, zfail: UInt, zpass: UInt): Unit = com.kgl.opengl.glStencilOp(fail, zfail, zpass)
actual fun glStencilOpSeparate(face: UInt, sfail: UInt, dpfail: UInt, dppass: UInt): Unit = com.kgl.opengl.glStencilOpSeparate(face, sfail, dpfail, dppass)
actual fun glTexBuffer(target: UInt, internalformat: UInt, buffer: UInt): Unit = com.kgl.opengl.glTexBuffer(target, internalformat, buffer)
actual fun glTexBufferRange(target: UInt, internalformat: UInt, buffer: UInt, offset: Long, size: Long): Unit = com.kgl.opengl.glTexBufferRange(target, internalformat, buffer, offset, size)
actual fun glTexImage1D(target: UInt, level: Int, internalformat: Int, width: Int, border: Int, format: UInt, type: UInt, pixels: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glTexImage1D(target, level, internalformat, width, border, format, type, pixels)
actual fun glTexImage2D(target: UInt, level: Int, internalformat: Int, width: Int, height: Int, border: Int, format: UInt, type: UInt, pixels: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels)
actual fun glTexImage2DMultisample(target: UInt, samples: Int, internalformat: UInt, width: Int, height: Int, fixedsamplelocations: UByte): Unit = com.kgl.opengl.glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations)
actual fun glTexImage2DMultisample(target: UInt, samples: Int, internalformat: UInt, width: Int, height: Int, fixedsamplelocations: Boolean): Unit = com.kgl.opengl.glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations)
actual fun glTexImage3D(target: UInt, level: Int, internalformat: Int, width: Int, height: Int, depth: Int, border: Int, format: UInt, type: UInt, pixels: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels)
actual fun glTexImage3DMultisample(target: UInt, samples: Int, internalformat: UInt, width: Int, height: Int, depth: Int, fixedsamplelocations: UByte): Unit = com.kgl.opengl.glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations)
actual fun glTexImage3DMultisample(target: UInt, samples: Int, internalformat: UInt, width: Int, height: Int, depth: Int, fixedsamplelocations: Boolean): Unit = com.kgl.opengl.glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations)
actual fun glTexParameterIiv(target: UInt, pname: UInt, params: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glTexParameterIiv(target, pname, params)
actual fun glTexParameterIuiv(target: UInt, pname: UInt, params: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glTexParameterIuiv(target, pname, params)
actual fun glTexParameterf(target: UInt, pname: UInt, param: Float): Unit = com.kgl.opengl.glTexParameterf(target, pname, param)
actual fun glTexParameterfv(target: UInt, pname: UInt, params: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glTexParameterfv(target, pname, params)
actual fun glTexParameteri(target: UInt, pname: UInt, param: Int): Unit = com.kgl.opengl.glTexParameteri(target, pname, param)
actual fun glTexParameteriv(target: UInt, pname: UInt, params: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glTexParameteriv(target, pname, params)
actual fun glTexStorage1D(target: UInt, levels: Int, internalformat: UInt, width: Int): Unit = com.kgl.opengl.glTexStorage1D(target, levels, internalformat, width)
actual fun glTexStorage2D(target: UInt, levels: Int, internalformat: UInt, width: Int, height: Int): Unit = com.kgl.opengl.glTexStorage2D(target, levels, internalformat, width, height)
actual fun glTexStorage2DMultisample(target: UInt, samples: Int, internalformat: UInt, width: Int, height: Int, fixedsamplelocations: UByte): Unit = com.kgl.opengl.glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations)
actual fun glTexStorage2DMultisample(target: UInt, samples: Int, internalformat: UInt, width: Int, height: Int, fixedsamplelocations: Boolean): Unit = com.kgl.opengl.glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations)
actual fun glTexStorage3D(target: UInt, levels: Int, internalformat: UInt, width: Int, height: Int, depth: Int): Unit = com.kgl.opengl.glTexStorage3D(target, levels, internalformat, width, height, depth)
actual fun glTexStorage3DMultisample(target: UInt, samples: Int, internalformat: UInt, width: Int, height: Int, depth: Int, fixedsamplelocations: UByte): Unit = com.kgl.opengl.glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations)
actual fun glTexStorage3DMultisample(target: UInt, samples: Int, internalformat: UInt, width: Int, height: Int, depth: Int, fixedsamplelocations: Boolean): Unit = com.kgl.opengl.glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations)
actual fun glTexSubImage1D(target: UInt, level: Int, xoffset: Int, width: Int, format: UInt, type: UInt, pixels: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glTexSubImage1D(target, level, xoffset, width, format, type, pixels)
actual fun glTexSubImage2D(target: UInt, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: UInt, type: UInt, pixels: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels)
actual fun glTexSubImage3D(target: UInt, level: Int, xoffset: Int, yoffset: Int, zoffset: Int, width: Int, height: Int, depth: Int, format: UInt, type: UInt, pixels: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
actual fun glTextureBarrier(): Unit = com.kgl.opengl.glTextureBarrier()
actual fun glTextureBuffer(texture: UInt, internalformat: UInt, buffer: UInt): Unit = com.kgl.opengl.glTextureBuffer(texture, internalformat, buffer)
actual fun glTextureBufferRange(texture: UInt, internalformat: UInt, buffer: UInt, offset: Long, size: Long): Unit = com.kgl.opengl.glTextureBufferRange(texture, internalformat, buffer, offset, size)
actual fun glTextureParameterIiv(texture: UInt, pname: UInt, params: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glTextureParameterIiv(texture, pname, params)
actual fun glTextureParameterIuiv(texture: UInt, pname: UInt, params: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glTextureParameterIuiv(texture, pname, params)
actual fun glTextureParameterf(texture: UInt, pname: UInt, param: Float): Unit = com.kgl.opengl.glTextureParameterf(texture, pname, param)
actual fun glTextureParameterfv(texture: UInt, pname: UInt, param: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glTextureParameterfv(texture, pname, param)
actual fun glTextureParameteri(texture: UInt, pname: UInt, param: Int): Unit = com.kgl.opengl.glTextureParameteri(texture, pname, param)
actual fun glTextureParameteriv(texture: UInt, pname: UInt, param: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glTextureParameteriv(texture, pname, param)
actual fun glTextureStorage1D(texture: UInt, levels: Int, internalformat: UInt, width: Int): Unit = com.kgl.opengl.glTextureStorage1D(texture, levels, internalformat, width)
actual fun glTextureStorage2D(texture: UInt, levels: Int, internalformat: UInt, width: Int, height: Int): Unit = com.kgl.opengl.glTextureStorage2D(texture, levels, internalformat, width, height)
actual fun glTextureStorage2DMultisample(texture: UInt, samples: Int, internalformat: UInt, width: Int, height: Int, fixedsamplelocations: UByte): Unit = com.kgl.opengl.glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations)
actual fun glTextureStorage2DMultisample(texture: UInt, samples: Int, internalformat: UInt, width: Int, height: Int, fixedsamplelocations: Boolean): Unit = com.kgl.opengl.glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations)
actual fun glTextureStorage3D(texture: UInt, levels: Int, internalformat: UInt, width: Int, height: Int, depth: Int): Unit = com.kgl.opengl.glTextureStorage3D(texture, levels, internalformat, width, height, depth)
actual fun glTextureStorage3DMultisample(texture: UInt, samples: Int, internalformat: UInt, width: Int, height: Int, depth: Int, fixedsamplelocations: UByte): Unit = com.kgl.opengl.glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations)
actual fun glTextureStorage3DMultisample(texture: UInt, samples: Int, internalformat: UInt, width: Int, height: Int, depth: Int, fixedsamplelocations: Boolean): Unit = com.kgl.opengl.glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations)
actual fun glTextureSubImage1D(texture: UInt, level: Int, xoffset: Int, width: Int, format: UInt, type: UInt, pixels: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels)
actual fun glTextureSubImage2D(texture: UInt, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: UInt, type: UInt, pixels: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels)
actual fun glTextureSubImage3D(texture: UInt, level: Int, xoffset: Int, yoffset: Int, zoffset: Int, width: Int, height: Int, depth: Int, format: UInt, type: UInt, pixels: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
actual fun glTextureView(texture: UInt, target: UInt, origtexture: UInt, internalformat: UInt, minlevel: UInt, numlevels: UInt, minlayer: UInt, numlayers: UInt): Unit = com.kgl.opengl.glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers)
actual fun glTransformFeedbackBufferBase(xfb: UInt, index: UInt, buffer: UInt): Unit = com.kgl.opengl.glTransformFeedbackBufferBase(xfb, index, buffer)
actual fun glTransformFeedbackBufferRange(xfb: UInt, index: UInt, buffer: UInt, offset: Long, size: Long): Unit = com.kgl.opengl.glTransformFeedbackBufferRange(xfb, index, buffer, offset, size)
actual fun glTransformFeedbackVaryings(program: UInt, count: Int, varyings: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVarOf<Byte>> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<Byte>>> */>?, bufferMode: UInt): Unit = com.kgl.opengl.glTransformFeedbackVaryings(program, count, varyings , bufferMode)
actual fun glUniform1d(location: Int, x: Double): Unit = com.kgl.opengl.glUniform1d(location, x)
actual fun glUniform1dv(location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniform1dv(location, count, value)
actual fun glUniform1f(location: Int, v0: Float): Unit = com.kgl.opengl.glUniform1f(location, v0)
actual fun glUniform1fv(location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniform1fv(location, count, value)
actual fun glUniform1i(location: Int, v0: Int): Unit = com.kgl.opengl.glUniform1i(location, v0)
actual fun glUniform1iv(location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glUniform1iv(location, count, value)
actual fun glUniform1ui(location: Int, v0: UInt): Unit = com.kgl.opengl.glUniform1ui(location, v0)
actual fun glUniform1uiv(location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glUniform1uiv(location, count, value)
actual fun glUniform2d(location: Int, x: Double, y: Double): Unit = com.kgl.opengl.glUniform2d(location, x, y)
actual fun glUniform2dv(location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniform2dv(location, count, value)
actual fun glUniform2f(location: Int, v0: Float, v1: Float): Unit = com.kgl.opengl.glUniform2f(location, v0, v1)
actual fun glUniform2fv(location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniform2fv(location, count, value)
actual fun glUniform2i(location: Int, v0: Int, v1: Int): Unit = com.kgl.opengl.glUniform2i(location, v0, v1)
actual fun glUniform2iv(location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glUniform2iv(location, count, value)
actual fun glUniform2ui(location: Int, v0: UInt, v1: UInt): Unit = com.kgl.opengl.glUniform2ui(location, v0, v1)
actual fun glUniform2uiv(location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glUniform2uiv(location, count, value)
actual fun glUniform3d(location: Int, x: Double, y: Double, z: Double): Unit = com.kgl.opengl.glUniform3d(location, x, y, z)
actual fun glUniform3dv(location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniform3dv(location, count, value)
actual fun glUniform3f(location: Int, v0: Float, v1: Float, v2: Float): Unit = com.kgl.opengl.glUniform3f(location, v0, v1, v2)
actual fun glUniform3fv(location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniform3fv(location, count, value)
actual fun glUniform3i(location: Int, v0: Int, v1: Int, v2: Int): Unit = com.kgl.opengl.glUniform3i(location, v0, v1, v2)
actual fun glUniform3iv(location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glUniform3iv(location, count, value)
actual fun glUniform3ui(location: Int, v0: UInt, v1: UInt, v2: UInt): Unit = com.kgl.opengl.glUniform3ui(location, v0, v1, v2)
actual fun glUniform3uiv(location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glUniform3uiv(location, count, value)
actual fun glUniform4d(location: Int, x: Double, y: Double, z: Double, w: Double): Unit = com.kgl.opengl.glUniform4d(location, x, y, z, w)
actual fun glUniform4dv(location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniform4dv(location, count, value)
actual fun glUniform4f(location: Int, v0: Float, v1: Float, v2: Float, v3: Float): Unit = com.kgl.opengl.glUniform4f(location, v0, v1, v2, v3)
actual fun glUniform4fv(location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniform4fv(location, count, value)
actual fun glUniform4i(location: Int, v0: Int, v1: Int, v2: Int, v3: Int): Unit = com.kgl.opengl.glUniform4i(location, v0, v1, v2, v3)
actual fun glUniform4iv(location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glUniform4iv(location, count, value)
actual fun glUniform4ui(location: Int, v0: UInt, v1: UInt, v2: UInt, v3: UInt): Unit = com.kgl.opengl.glUniform4ui(location, v0, v1, v2, v3)
actual fun glUniform4uiv(location: Int, count: Int, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glUniform4uiv(location, count, value)
actual fun glUniformBlockBinding(program: UInt, uniformBlockIndex: UInt, uniformBlockBinding: UInt): Unit = com.kgl.opengl.glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding)
actual fun glUniformMatrix2dv(location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniformMatrix2dv(location, count, transpose, value)
actual fun glUniformMatrix2dv(location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniformMatrix2dv(location, count, transpose, value)
actual fun glUniformMatrix2fv(location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniformMatrix2fv(location, count, transpose, value)
actual fun glUniformMatrix2fv(location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniformMatrix2fv(location, count, transpose, value)
actual fun glUniformMatrix2x3dv(location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniformMatrix2x3dv(location, count, transpose, value)
actual fun glUniformMatrix2x3dv(location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniformMatrix2x3dv(location, count, transpose, value)
actual fun glUniformMatrix2x3fv(location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniformMatrix2x3fv(location, count, transpose, value)
actual fun glUniformMatrix2x3fv(location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniformMatrix2x3fv(location, count, transpose, value)
actual fun glUniformMatrix2x4dv(location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniformMatrix2x4dv(location, count, transpose, value)
actual fun glUniformMatrix2x4dv(location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniformMatrix2x4dv(location, count, transpose, value)
actual fun glUniformMatrix2x4fv(location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniformMatrix2x4fv(location, count, transpose, value)
actual fun glUniformMatrix2x4fv(location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniformMatrix2x4fv(location, count, transpose, value)
actual fun glUniformMatrix3dv(location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniformMatrix3dv(location, count, transpose, value)
actual fun glUniformMatrix3dv(location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniformMatrix3dv(location, count, transpose, value)
actual fun glUniformMatrix3fv(location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniformMatrix3fv(location, count, transpose, value)
actual fun glUniformMatrix3fv(location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniformMatrix3fv(location, count, transpose, value)
actual fun glUniformMatrix3x2dv(location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniformMatrix3x2dv(location, count, transpose, value)
actual fun glUniformMatrix3x2dv(location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniformMatrix3x2dv(location, count, transpose, value)
actual fun glUniformMatrix3x2fv(location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniformMatrix3x2fv(location, count, transpose, value)
actual fun glUniformMatrix3x2fv(location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniformMatrix3x2fv(location, count, transpose, value)
actual fun glUniformMatrix3x4dv(location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniformMatrix3x4dv(location, count, transpose, value)
actual fun glUniformMatrix3x4dv(location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniformMatrix3x4dv(location, count, transpose, value)
actual fun glUniformMatrix3x4fv(location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniformMatrix3x4fv(location, count, transpose, value)
actual fun glUniformMatrix3x4fv(location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniformMatrix3x4fv(location, count, transpose, value)
actual fun glUniformMatrix4dv(location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniformMatrix4dv(location, count, transpose, value)
actual fun glUniformMatrix4dv(location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniformMatrix4dv(location, count, transpose, value)
actual fun glUniformMatrix4fv(location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniformMatrix4fv(location, count, transpose, value)
actual fun glUniformMatrix4fv(location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniformMatrix4fv(location, count, transpose, value)
actual fun glUniformMatrix4x2dv(location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniformMatrix4x2dv(location, count, transpose, value)
actual fun glUniformMatrix4x2dv(location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniformMatrix4x2dv(location, count, transpose, value)
actual fun glUniformMatrix4x2fv(location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniformMatrix4x2fv(location, count, transpose, value)
actual fun glUniformMatrix4x2fv(location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniformMatrix4x2fv(location, count, transpose, value)
actual fun glUniformMatrix4x3dv(location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniformMatrix4x3dv(location, count, transpose, value)
actual fun glUniformMatrix4x3dv(location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glUniformMatrix4x3dv(location, count, transpose, value)
actual fun glUniformMatrix4x3fv(location: Int, count: Int, transpose: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniformMatrix4x3fv(location, count, transpose, value)
actual fun glUniformMatrix4x3fv(location: Int, count: Int, transpose: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glUniformMatrix4x3fv(location, count, transpose, value)
actual fun glUniformSubroutinesuiv(shadertype: UInt, count: Int, indices: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glUniformSubroutinesuiv(shadertype, count, indices)
actual fun glUnmapBuffer(target: UInt): Boolean = com.kgl.opengl.glUnmapBuffer(target)
actual fun glUnmapNamedBuffer(buffer: UInt): Boolean = com.kgl.opengl.glUnmapNamedBuffer(buffer)
actual fun glUseProgram(program: UInt): Unit = com.kgl.opengl.glUseProgram(program)
actual fun glUseProgramStages(pipeline: UInt, stages: UInt, program: UInt): Unit = com.kgl.opengl.glUseProgramStages(pipeline, stages, program)
actual fun glValidateProgram(program: UInt): Unit = com.kgl.opengl.glValidateProgram(program)
actual fun glValidateProgramPipeline(pipeline: UInt): Unit = com.kgl.opengl.glValidateProgramPipeline(pipeline)
actual fun glVertexArrayAttribBinding(vaobj: UInt, attribindex: UInt, bindingindex: UInt): Unit = com.kgl.opengl.glVertexArrayAttribBinding(vaobj, attribindex, bindingindex)
actual fun glVertexArrayAttribFormat(vaobj: UInt, attribindex: UInt, size: Int, type: UInt, normalized: UByte, relativeoffset: UInt): Unit = com.kgl.opengl.glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset)
actual fun glVertexArrayAttribFormat(vaobj: UInt, attribindex: UInt, size: Int, type: UInt, normalized: Boolean, relativeoffset: UInt): Unit = com.kgl.opengl.glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset)
actual fun glVertexArrayAttribIFormat(vaobj: UInt, attribindex: UInt, size: Int, type: UInt, relativeoffset: UInt): Unit = com.kgl.opengl.glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset)
actual fun glVertexArrayAttribLFormat(vaobj: UInt, attribindex: UInt, size: Int, type: UInt, relativeoffset: UInt): Unit = com.kgl.opengl.glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset)
actual fun glVertexArrayBindingDivisor(vaobj: UInt, bindingindex: UInt, divisor: UInt): Unit = com.kgl.opengl.glVertexArrayBindingDivisor(vaobj, bindingindex, divisor)
actual fun glVertexArrayElementBuffer(vaobj: UInt, buffer: UInt): Unit = com.kgl.opengl.glVertexArrayElementBuffer(vaobj, buffer)
actual fun glVertexArrayVertexBuffer(vaobj: UInt, bindingindex: UInt, buffer: UInt, offset: Long, stride: Int): Unit = com.kgl.opengl.glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset , stride)
actual fun glVertexArrayVertexBuffers(vaobj: UInt, first: UInt, count: Int, buffers: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?, offsets: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.LongVarOf<Long>>?, strides: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides)
actual fun glVertexAttrib1d(index: UInt, x: Double): Unit = com.kgl.opengl.glVertexAttrib1d(index, x)
actual fun glVertexAttrib1dv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glVertexAttrib1dv(index, v)
actual fun glVertexAttrib1f(index: UInt, x: Float): Unit = com.kgl.opengl.glVertexAttrib1f(index, x)
actual fun glVertexAttrib1fv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glVertexAttrib1fv(index, v)
actual fun glVertexAttrib1s(index: UInt, x: Short): Unit = com.kgl.opengl.glVertexAttrib1s(index, x)
actual fun glVertexAttrib1sv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ShortVarOf<Short>>?): Unit = com.kgl.opengl.glVertexAttrib1sv(index, v)
actual fun glVertexAttrib2d(index: UInt, x: Double, y: Double): Unit = com.kgl.opengl.glVertexAttrib2d(index, x, y)
actual fun glVertexAttrib2dv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glVertexAttrib2dv(index, v)
actual fun glVertexAttrib2f(index: UInt, x: Float, y: Float): Unit = com.kgl.opengl.glVertexAttrib2f(index, x, y)
actual fun glVertexAttrib2fv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glVertexAttrib2fv(index, v)
actual fun glVertexAttrib2s(index: UInt, x: Short, y: Short): Unit = com.kgl.opengl.glVertexAttrib2s(index, x, y)
actual fun glVertexAttrib2sv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ShortVarOf<Short>>?): Unit = com.kgl.opengl.glVertexAttrib2sv(index, v)
actual fun glVertexAttrib3d(index: UInt, x: Double, y: Double, z: Double): Unit = com.kgl.opengl.glVertexAttrib3d(index, x, y, z)
actual fun glVertexAttrib3dv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glVertexAttrib3dv(index, v)
actual fun glVertexAttrib3f(index: UInt, x: Float, y: Float, z: Float): Unit = com.kgl.opengl.glVertexAttrib3f(index, x, y, z)
actual fun glVertexAttrib3fv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glVertexAttrib3fv(index, v)
actual fun glVertexAttrib3s(index: UInt, x: Short, y: Short, z: Short): Unit = com.kgl.opengl.glVertexAttrib3s(index, x, y, z)
actual fun glVertexAttrib3sv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ShortVarOf<Short>>?): Unit = com.kgl.opengl.glVertexAttrib3sv(index, v)
actual fun glVertexAttrib4Nbv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glVertexAttrib4Nbv(index, v)
actual fun glVertexAttrib4Niv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glVertexAttrib4Niv(index, v)
actual fun glVertexAttrib4Nsv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ShortVarOf<Short>>?): Unit = com.kgl.opengl.glVertexAttrib4Nsv(index, v)
actual fun glVertexAttrib4Nub(index: UInt, x: UByte, y: UByte, z: UByte, w: UByte): Unit = com.kgl.opengl.glVertexAttrib4Nub(index, x, y, z, w)
actual fun glVertexAttrib4Nubv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UByteVarOf<UByte>>?): Unit = com.kgl.opengl.glVertexAttrib4Nubv(index, v)
actual fun glVertexAttrib4Nuiv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glVertexAttrib4Nuiv(index, v)
actual fun glVertexAttrib4Nusv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UShortVarOf<UShort>>?): Unit = com.kgl.opengl.glVertexAttrib4Nusv(index, v)
actual fun glVertexAttrib4bv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glVertexAttrib4bv(index, v)
actual fun glVertexAttrib4d(index: UInt, x: Double, y: Double, z: Double, w: Double): Unit = com.kgl.opengl.glVertexAttrib4d(index, x, y, z, w)
actual fun glVertexAttrib4dv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glVertexAttrib4dv(index, v)
actual fun glVertexAttrib4f(index: UInt, x: Float, y: Float, z: Float, w: Float): Unit = com.kgl.opengl.glVertexAttrib4f(index, x, y, z, w)
actual fun glVertexAttrib4fv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glVertexAttrib4fv(index, v)
actual fun glVertexAttrib4iv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glVertexAttrib4iv(index, v)
actual fun glVertexAttrib4s(index: UInt, x: Short, y: Short, z: Short, w: Short): Unit = com.kgl.opengl.glVertexAttrib4s(index, x, y, z, w)
actual fun glVertexAttrib4sv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ShortVarOf<Short>>?): Unit = com.kgl.opengl.glVertexAttrib4sv(index, v)
actual fun glVertexAttrib4ubv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UByteVarOf<UByte>>?): Unit = com.kgl.opengl.glVertexAttrib4ubv(index, v)
actual fun glVertexAttrib4uiv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glVertexAttrib4uiv(index, v)
actual fun glVertexAttrib4usv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UShortVarOf<UShort>>?): Unit = com.kgl.opengl.glVertexAttrib4usv(index, v)
actual fun glVertexAttribBinding(attribindex: UInt, bindingindex: UInt): Unit = com.kgl.opengl.glVertexAttribBinding(attribindex, bindingindex)
actual fun glVertexAttribDivisor(index: UInt, divisor: UInt): Unit = com.kgl.opengl.glVertexAttribDivisor(index, divisor)
actual fun glVertexAttribFormat(attribindex: UInt, size: Int, type: UInt, normalized: UByte, relativeoffset: UInt): Unit = com.kgl.opengl.glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset)
actual fun glVertexAttribFormat(attribindex: UInt, size: Int, type: UInt, normalized: Boolean, relativeoffset: UInt): Unit = com.kgl.opengl.glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset)
actual fun glVertexAttribI1i(index: UInt, x: Int): Unit = com.kgl.opengl.glVertexAttribI1i(index, x)
actual fun glVertexAttribI1iv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glVertexAttribI1iv(index, v)
actual fun glVertexAttribI1ui(index: UInt, x: UInt): Unit = com.kgl.opengl.glVertexAttribI1ui(index, x)
actual fun glVertexAttribI1uiv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glVertexAttribI1uiv(index, v)
actual fun glVertexAttribI2i(index: UInt, x: Int, y: Int): Unit = com.kgl.opengl.glVertexAttribI2i(index, x, y)
actual fun glVertexAttribI2iv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glVertexAttribI2iv(index, v)
actual fun glVertexAttribI2ui(index: UInt, x: UInt, y: UInt): Unit = com.kgl.opengl.glVertexAttribI2ui(index, x, y)
actual fun glVertexAttribI2uiv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glVertexAttribI2uiv(index, v)
actual fun glVertexAttribI3i(index: UInt, x: Int, y: Int, z: Int): Unit = com.kgl.opengl.glVertexAttribI3i(index, x, y, z)
actual fun glVertexAttribI3iv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glVertexAttribI3iv(index, v)
actual fun glVertexAttribI3ui(index: UInt, x: UInt, y: UInt, z: UInt): Unit = com.kgl.opengl.glVertexAttribI3ui(index, x, y, z)
actual fun glVertexAttribI3uiv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glVertexAttribI3uiv(index, v)
actual fun glVertexAttribI4bv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVarOf<Byte>>?): Unit = com.kgl.opengl.glVertexAttribI4bv(index, v)
actual fun glVertexAttribI4i(index: UInt, x: Int, y: Int, z: Int, w: Int): Unit = com.kgl.opengl.glVertexAttribI4i(index, x, y, z, w)
actual fun glVertexAttribI4iv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVarOf<Int>>?): Unit = com.kgl.opengl.glVertexAttribI4iv(index, v)
actual fun glVertexAttribI4sv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ShortVarOf<Short>>?): Unit = com.kgl.opengl.glVertexAttribI4sv(index, v)
actual fun glVertexAttribI4ubv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UByteVarOf<UByte>>?): Unit = com.kgl.opengl.glVertexAttribI4ubv(index, v)
actual fun glVertexAttribI4ui(index: UInt, x: UInt, y: UInt, z: UInt, w: UInt): Unit = com.kgl.opengl.glVertexAttribI4ui(index, x, y, z, w)
actual fun glVertexAttribI4uiv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glVertexAttribI4uiv(index, v)
actual fun glVertexAttribI4usv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UShortVarOf<UShort>>?): Unit = com.kgl.opengl.glVertexAttribI4usv(index, v)
actual fun glVertexAttribIFormat(attribindex: UInt, size: Int, type: UInt, relativeoffset: UInt): Unit = com.kgl.opengl.glVertexAttribIFormat(attribindex, size, type, relativeoffset)
actual fun glVertexAttribIPointer(index: UInt, size: Int, type: UInt, stride: Int, pointer: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glVertexAttribIPointer(index, size, type, stride, pointer)
actual fun glVertexAttribL1d(index: UInt, x: Double): Unit = com.kgl.opengl.glVertexAttribL1d(index, x)
actual fun glVertexAttribL1dv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glVertexAttribL1dv(index, v)
actual fun glVertexAttribL2d(index: UInt, x: Double, y: Double): Unit = com.kgl.opengl.glVertexAttribL2d(index, x, y)
actual fun glVertexAttribL2dv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glVertexAttribL2dv(index, v)
actual fun glVertexAttribL3d(index: UInt, x: Double, y: Double, z: Double): Unit = com.kgl.opengl.glVertexAttribL3d(index, x, y, z)
actual fun glVertexAttribL3dv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glVertexAttribL3dv(index, v)
actual fun glVertexAttribL4d(index: UInt, x: Double, y: Double, z: Double, w: Double): Unit = com.kgl.opengl.glVertexAttribL4d(index, x, y, z, w)
actual fun glVertexAttribL4dv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVarOf<Double>>?): Unit = com.kgl.opengl.glVertexAttribL4dv(index, v)
actual fun glVertexAttribLFormat(attribindex: UInt, size: Int, type: UInt, relativeoffset: UInt): Unit = com.kgl.opengl.glVertexAttribLFormat(attribindex, size, type, relativeoffset)
actual fun glVertexAttribLPointer(index: UInt, size: Int, type: UInt, stride: Int, pointer: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glVertexAttribLPointer(index, size, type, stride, pointer)
actual fun glVertexAttribP1ui(index: UInt, type: UInt, normalized: UByte, value: UInt): Unit = com.kgl.opengl.glVertexAttribP1ui(index, type, normalized, value)
actual fun glVertexAttribP1ui(index: UInt, type: UInt, normalized: Boolean, value: UInt): Unit = com.kgl.opengl.glVertexAttribP1ui(index, type, normalized, value)
actual fun glVertexAttribP1uiv(index: UInt, type: UInt, normalized: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glVertexAttribP1uiv(index, type, normalized, value)
actual fun glVertexAttribP1uiv(index: UInt, type: UInt, normalized: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glVertexAttribP1uiv(index, type, normalized, value)
actual fun glVertexAttribP2ui(index: UInt, type: UInt, normalized: UByte, value: UInt): Unit = com.kgl.opengl.glVertexAttribP2ui(index, type, normalized, value)
actual fun glVertexAttribP2ui(index: UInt, type: UInt, normalized: Boolean, value: UInt): Unit = com.kgl.opengl.glVertexAttribP2ui(index, type, normalized, value)
actual fun glVertexAttribP2uiv(index: UInt, type: UInt, normalized: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glVertexAttribP2uiv(index, type, normalized, value)
actual fun glVertexAttribP2uiv(index: UInt, type: UInt, normalized: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glVertexAttribP2uiv(index, type, normalized, value)
actual fun glVertexAttribP3ui(index: UInt, type: UInt, normalized: UByte, value: UInt): Unit = com.kgl.opengl.glVertexAttribP3ui(index, type, normalized, value)
actual fun glVertexAttribP3ui(index: UInt, type: UInt, normalized: Boolean, value: UInt): Unit = com.kgl.opengl.glVertexAttribP3ui(index, type, normalized, value)
actual fun glVertexAttribP3uiv(index: UInt, type: UInt, normalized: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glVertexAttribP3uiv(index, type, normalized, value)
actual fun glVertexAttribP3uiv(index: UInt, type: UInt, normalized: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glVertexAttribP3uiv(index, type, normalized, value)
actual fun glVertexAttribP4ui(index: UInt, type: UInt, normalized: UByte, value: UInt): Unit = com.kgl.opengl.glVertexAttribP4ui(index, type, normalized, value)
actual fun glVertexAttribP4ui(index: UInt, type: UInt, normalized: Boolean, value: UInt): Unit = com.kgl.opengl.glVertexAttribP4ui(index, type, normalized, value)
actual fun glVertexAttribP4uiv(index: UInt, type: UInt, normalized: UByte, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glVertexAttribP4uiv(index, type, normalized, value)
actual fun glVertexAttribP4uiv(index: UInt, type: UInt, normalized: Boolean, value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVarOf<UInt>>?): Unit = com.kgl.opengl.glVertexAttribP4uiv(index, type, normalized, value)
actual fun glVertexAttribPointer(index: UInt, size: Int, type: UInt, normalized: UByte, stride: Int, pointer: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glVertexAttribPointer(index, size, type, normalized, stride, pointer)
actual fun glVertexAttribPointer(index: UInt, size: Int, type: UInt, normalized: Boolean, stride: Int, pointer: kotlinx.cinterop.CValuesRef<*>?): Unit = com.kgl.opengl.glVertexAttribPointer(index, size, type, normalized, stride, pointer)
actual fun glVertexBindingDivisor(bindingindex: UInt, divisor: UInt): Unit = com.kgl.opengl.glVertexBindingDivisor(bindingindex, divisor)
actual fun glViewport(x: Int, y: Int, width: Int, height: Int): Unit = com.kgl.opengl.glViewport(x, y, width, height)
actual fun glViewportArrayv(first: UInt, count: Int, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glViewportArrayv(first, count, v)
actual fun glViewportIndexedf(index: UInt, x: Float, y: Float, w: Float, h: Float): Unit = com.kgl.opengl.glViewportIndexedf(index, x, y, w, h)
actual fun glViewportIndexedfv(index: UInt, v: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVarOf<Float>>?): Unit = com.kgl.opengl.glViewportIndexedfv(index, v)
actual fun glWaitSync(sync: kotlinx.cinterop.CPointer<cnames.structs.__GLsync>?, flags: UInt, timeout: ULong): Unit = com.kgl.opengl.glWaitSync(sync, flags, timeout)
actual fun nglGetString(name: UInt): kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<UByte>>? = com.kgl.opengl.nglGetString(name)
actual fun nglGetStringi(name: UInt, index: UInt): kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<UByte>>? = com.kgl.opengl.nglGetStringi(name, index)
actual fun nglIsBuffer(buffer: UInt): UByte = com.kgl.opengl.nglIsBuffer(buffer)
actual fun nglIsEnabled(cap: UInt): UByte = com.kgl.opengl.nglIsEnabled(cap)
actual fun nglIsEnabledi(target: UInt, index: UInt): UByte = com.kgl.opengl.nglIsEnabledi(target, index)
actual fun nglIsFramebuffer(framebuffer: UInt): UByte = com.kgl.opengl.nglIsFramebuffer(framebuffer)
actual fun nglIsProgram(program: UInt): UByte = com.kgl.opengl.nglIsProgram(program)
actual fun nglIsProgramPipeline(pipeline: UInt): UByte = com.kgl.opengl.nglIsProgramPipeline(pipeline)
actual fun nglIsQuery(id: UInt): UByte = com.kgl.opengl.nglIsQuery(id)
actual fun nglIsRenderbuffer(renderbuffer: UInt): UByte = com.kgl.opengl.nglIsRenderbuffer(renderbuffer)
actual fun nglIsSampler(sampler: UInt): UByte = com.kgl.opengl.nglIsSampler(sampler)
actual fun nglIsShader(shader: UInt): UByte = com.kgl.opengl.nglIsShader(shader)
actual fun nglIsSync(sync: kotlinx.cinterop.CPointer<cnames.structs.__GLsync>?): UByte = com.kgl.opengl.nglIsSync(sync)
actual fun nglIsTexture(texture: UInt): UByte = com.kgl.opengl.nglIsTexture(texture)
actual fun nglIsTransformFeedback(id: UInt): UByte = com.kgl.opengl.nglIsTransformFeedback(id)
actual fun nglIsVertexArray(array: UInt): UByte = com.kgl.opengl.nglIsVertexArray(array)
actual fun nglUnmapBuffer(target: UInt): UByte = com.kgl.opengl.nglUnmapBuffer(target)
actual fun nglUnmapNamedBuffer(buffer: UInt): UByte = com.kgl.opengl.nglUnmapNamedBuffer(buffer)
